{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponents.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetaildeSidebat.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileUpdateFrom.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileEventCard.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileEvents.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRout.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modelStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","console","log","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","updateFollowing","listFollowings","predicate","getActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPredicate","value","resetPredicate","forEach","setPagingParams","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","URLSearchParams","toString","toISOString","ProfileStore","profile","loadingProfile","uploading","deleting","followings","loadingFollowings","loadingActivities","activeTab","activityTab","setActiveTab","setActivityTab","loadProfile","photo","photos","isMain","setImage","p","updateData","activityStore","followingCount","loadFollowings","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setItem","setAppLoaded","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComent","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","e","preventDefault","handleFollow","Card","Description","bio","substr","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","basic","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","MessageList","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","cpntent","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","selected","useHistory","useParams","validationScheme","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","length","relaxed","divided","ribbon","verticalAlign","Extra","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","Actions","Action","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","ProfileUpdateForm","updateProdileMode","updateProfileMode","setUpdateProfileMode","Tab","Pane","panes","menuItem","menu","onTabChange","activeIndex","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropZone","setFiles","dzStyles","borderRadius","paddingTop","hieght","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","deletingTarget","setDeletingTarget","currentTarget","handleSetMainPhoto","info","handleDeletePhoto","ProfileAbout","ProfileEvents","ProfileFollowings","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ServerError","ProfilePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"8YAOaA,EAIT,WAAYC,EAASC,GAAwB,yBAH7CD,UAG4C,OAF5CC,gBAE4C,EACxCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAIT,aAA0C,IAA9BC,EAA6B,uDAAhB,EAAGC,EAAa,uDAAF,EAAE,yBAHzCD,gBAGyC,OAFzCC,cAEyC,EACrCH,KAAKE,WAAaA,EAClBF,KAAKG,SAAWA,GCTxBC,IAAMC,SAASC,QAAUC,OAEzBH,IAAMI,aAAaC,QAAQC,KAAI,SAAAC,GAC3B,IAAMC,EAAQC,EAAMC,YAAYF,MAGhC,OADGA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAC5CD,KAGXP,IAAMI,aAAaS,SAASP,IAA5B,+BAAAQ,EAAA,MAAgC,WAAMD,GAAN,eAAAC,EAAA,iFAGlBnB,EAAakB,EAASF,QAAT,YAHK,uBAKpBE,EAASnB,KAAO,IAAID,EAAgBoB,EAASnB,KAAMqB,KAAKC,MAAMrB,IAL1C,kBAMbkB,GANa,gCAQjBA,GARiB,2CAAhC,uDASG,SAACI,GACA,MAA+BA,EAAMJ,SAA9BnB,EAAP,EAAOA,KAAMwB,EAAb,EAAaA,OAAQX,EAArB,EAAqBA,OACrB,OAAOW,GACH,KAAK,IAOD,GANmB,kBAATxB,GACNyB,IAAMF,MAAMvB,GAEK,QAAlBa,EAAOa,QAAoB1B,EAAK2B,OAAOC,eAAe,OACrDC,GAAQC,KAAK,cAEd9B,EAAK2B,OAAO,CACX,IAAMI,EAAmB,GAEzB,IAAK,IAAMC,KAAOhC,EAAK2B,OAChB3B,EAAK2B,OAAOK,IACXD,EAAiBD,KAAK9B,EAAK2B,OAAOK,IAG1C,MAAMD,EAAiBE,OAG3B,MACJ,KAAK,IACDR,IAAMF,MAAM,gBACZ,MACJ,KAAK,IACDM,GAAQC,KAAK,cACb,MACJ,KAAK,IACDf,EAAMC,YAAYkB,eAAelC,GACjC6B,GAAQC,KAAK,iBAGrB,OAAOK,QAAQC,OAAOb,MAG1B,IAAMc,EAAe,SAAIlB,GAAJ,OAAmCA,EAASnB,MAE3DsC,EACG,SAAIC,GAAJ,OAAoBjC,IAAMkC,IAAOD,GAAKE,KAAKJ,IAD9CC,EAEI,SAAIC,EAAaG,GAAjB,OAA+BpC,IAAMqC,KAAQJ,EAAKG,GAAMD,KAAKJ,IAFjEC,EAGG,SAAIC,EAAaG,GAAjB,OAA8BpC,IAAMsC,IAAOL,EAAKG,GAAMD,KAAKJ,IAH9DC,EAIG,SAAIC,GAAJ,OAAoBjC,IAAMuC,OAAUN,GAAKE,KAAKJ,IA4CxCS,EAND,CACVC,WApCe,CACfC,KAAM,SAACC,GAAD,OAA6B3C,IAAMkC,IAAiC,cAAe,CAACS,WAASR,KAAKJ,IACxGa,QAAS,SAACC,GAAD,OAAgBb,EAAA,sBAAsCa,KAC/DC,OAAQ,SAACC,GAAD,OAAkCf,EAAoB,cAAee,IAC7EC,OAAQ,SAACD,GAAD,OAAkCf,EAAA,sBAAkCe,EAASF,IAAME,IAC3FR,OAAQ,SAACM,GAAD,OAAgBb,EAAA,sBAAkCa,KAC1DI,OAAQ,SAACJ,GAAD,OAAgBb,EAAA,sBAAmCa,EAAnC,WAAgD,MA+BxEK,QA5BY,CACZC,QAAS,kBAAMnB,EAAmB,aAClCoB,MAAO,SAACC,GAAD,OAA0BrB,EAAoB,iBAAkBqB,IACvEC,SAAU,SAACD,GAEP,OADAE,QAAQC,IAAIH,GACLrB,EAAoB,oBAAqBqB,KAwBpDI,SApBa,CACbvB,IAAK,SAACwB,GAAD,OAAsB1B,EAAA,oBAAmC0B,KAC9DC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjB5D,IAAMqC,KAAY,UAAWwB,EAAS,CACzClD,QAAS,CAAC,eAAgB,0BAGlCqD,aAAc,SAACnB,GAAD,OAAgBb,EAAA,kBAAyBa,EAAzB,YAAsC,KACpEoB,YAAa,SAACpB,GAAD,OAAgBb,EAAA,kBAAwBa,KACrDqB,cAAe,SAACxE,GAAD,OAA6BsC,EAAA,YAAkCtC,IAC9EyE,gBAAiB,SAACT,GAAD,OAAsB1B,EAAA,kBAAyB0B,GAAY,KAC5EU,eAAgB,SAACV,EAAkBW,GAAnB,OAAyCrC,EAAA,kBAAmC0B,EAAnC,sBAAyDW,KAClHC,cAAe,SAACZ,EAAkBW,GAAnB,OAAyCrC,EAAA,oBAA6C0B,EAA7C,iCAA8EW,OC3F7HE,EACT,WAAYC,GAA2B,oBACnCC,OAAOC,OAAO9E,KAAM4E,IAKfG,EAST,WAAY5B,GAAqB,yBARjCF,QAAc+B,EAQkB,KAPhCC,MAAgB,GAOgB,KANhCC,SAAmB,GAMa,KALhCC,YAAsB,GAKU,KAJhCC,KAAoB,KAIY,KAHhCC,KAAc,GAGkB,KAFhCC,MAAc,GAGPnC,IACCnD,KAAKiD,GAAKE,EAASF,GACnBjD,KAAKiF,MAAQ9B,EAAS8B,MACtBjF,KAAKkF,SAAW/B,EAAS+B,SACzBlF,KAAKmF,YAAchC,EAASgC,YAC5BnF,KAAKoF,KAAOjC,EAASiC,KACrBpF,KAAKsF,MAAQnC,EAASmC,MACtBtF,KAAKqF,KAAOlC,EAASkC,O,SC7BpBE,EACT,WAAY9B,GAAY,oBACpBzD,KAAK8D,SAAWL,EAAKK,SACrB9D,KAAKwF,YAAc/B,EAAK+B,YACxBxF,KAAKyF,MAAQhC,EAAKgC,OCNLC,E,WAUjB,aAAc,IAAD,gCATbC,iBAAmB,IAAIC,IASV,KARbC,sBAAyCb,EAQ5B,KAPbc,UAAW,EAOE,KANbC,SAAU,EAMG,KALbC,gBAAiB,EAKJ,KAJbjG,WAAgC,KAInB,KAHbkG,aAAe,IAAIhG,EAGN,KAFbwE,WAAY,IAAImB,KAAMM,IAAI,OAAO,GAEpB,KAyCbC,aAAe,SAAC1B,EAAmB2B,GAC/B,IAAMC,EAAiB,WACnB,EAAK5B,UAAU6B,SAAQ,SAACF,EAAOtE,GAChB,cAARA,GAAqB,EAAK2C,UAAU9B,OAAOb,OAGtD,OAAO2C,GACH,IAAK,MACD4B,IACA,EAAK5B,UAAUyB,IAAI,OAAO,GAC1B,MACJ,IAAK,UACDG,IACA,EAAK5B,UAAUyB,IAAI,WAAW,GAC9B,MACJ,IAAK,SACDG,IACA,EAAK5B,UAAUyB,IAAI,UAAU,GAC7B,MACJ,IAAK,YACD,EAAKzB,UAAU9B,OAAO,aACtB,EAAK8B,UAAUyB,IAAI,YAAaE,KA9D/B,KAmEbG,gBAAkB,SAACN,GACf,EAAKA,aAAeA,GApEX,KAuEbO,eAvEa,sBAuEI,4BAAAtF,EAAA,sEAET,EAAKuF,mBAAkB,GAFd,SAGY7D,EAAMC,WAAWC,KAAK,EAAK4D,aAHvC,QAGHC,EAHG,QAIF7G,KAAKwG,SAAQ,SAAAnD,GACpB,EAAKyD,YAAYzD,MAEf,EAAKsD,mBAAkB,GACvB,EAAKI,cAAcF,EAAO5G,YARnB,kDAUT4D,QAAQC,IAAR,MACA,EAAK6C,mBAAkB,GAXd,0DAvEJ,KAuFbK,aAvFa,uCAuFE,WAAO7D,GAAP,eAAA/B,EAAA,2DACPiC,EAAW,EAAK4D,YAAY9D,IADrB,uBAIP,EAAK4C,iBAAmB1C,EAJjB,kBAKAA,GALA,cAOP,EAAKsD,mBAAkB,GAPhB,mBASc7D,EAAMC,WAAWG,QAAQC,GATvC,eASHE,EATG,OAUH,EAAKyD,YAAYzD,GACjB6D,aAAY,WACR,EAAKnB,iBAAmB1C,KAE5B,EAAKsD,mBAAkB,GAdpB,kBAeItD,GAfJ,kCAkBHQ,QAAQC,IAAR,MACA,EAAK6C,mBAAkB,GAnBpB,0DAvFF,2DA+GbI,cAAgB,SAAC9G,GACb,EAAKA,WAAaA,GAhHT,KAmHL6G,YAAc,SAACzD,GACnB,IACQ,EADFM,EAAO5C,EAAMoG,UAAUxD,KAC1BA,IACCN,EAAS+D,QAAU/D,EAASgE,UAAWC,MACnC,SAAAlG,GAAC,OAAIA,EAAE4C,WAAaL,EAAKK,YAEzBX,EAASkE,OAASlE,EAASmE,eAAiB7D,EAAKK,SACjDX,EAASoE,KAAT,UAAgBpE,EAASgE,iBAAzB,aAAgB,EAAoBK,MAAK,SAAAC,GAAC,OAAIA,EAAE3D,WAAaX,EAASmE,iBAE9EnE,EAASiC,KAAO,IAAIsC,KAAKvE,EAASiC,MAClC,EAAKO,iBAAiBO,IAAI/C,EAASF,GAAIE,IA7H9B,KAgIL4D,YAAc,SAAC9D,GACnB,OAAO,EAAK0C,iBAAiBrD,IAAIW,IAjIxB,KAqIbwD,kBAAoB,SAACkB,GACjB,EAAK3B,eAAiB2B,GAtIb,KA2IbC,eA3Ia,uCA2II,WAAOzE,GAAP,mBAAAjC,EAAA,6DACPuC,EAAO5C,EAAMoG,UAAUxD,KACvBoE,EAAW,IAAItC,EAAQ9B,GAFhB,kBAIHb,EAAMC,WAAWK,OAAOC,GAJrB,QAKH2E,EAAc,IAAInD,EAASxB,IACrBmE,aAAe7D,EAAMK,SACjCgE,EAAYX,UAAY,CAACU,GACzB,EAAKjB,YAAYkB,GACjBd,aAAY,WACR,EAAKnB,iBAAmBiC,KAVnB,kDAaTnE,QAAQC,IAAR,MAbS,0DA3IJ,2DA8JbmE,eA9Ja,uCA8JI,WAAO5E,GAAP,SAAAjC,EAAA,+EAEH0B,EAAMC,WAAWO,OAAOD,GAFrB,OAIT6D,aAAY,WACR,GAAG7D,EAASF,GAAG,CACX,IAAI+E,EAAe,2BAAO,EAAKjB,YAAY5D,EAASF,KAAQE,GAC5D,EAAKwC,iBAAiBO,IAAI/C,EAASF,GAAI+E,GACvC,EAAKnC,iBAAmBmC,MARvB,gDAeTrE,QAAQC,IAAR,MAEAoD,aAAY,WACR,EAAKjB,SAAU,KAlBV,yDA9JJ,2DAqLbkC,eArLa,uCAqLI,WAAOhF,GAAP,SAAA/B,EAAA,6DACb,EAAK6E,SAAU,EADF,kBAIHnD,EAAMC,WAAWF,OAAOM,GAJrB,OAMT+D,aAAY,WACT,EAAKrB,iBAAiBhD,OAAOM,GAC7B,EAAK8C,SAAU,KART,gDAYTpC,QAAQC,IAAR,MAEAoD,aAAY,WACR,EAAKjB,SAAU,KAfV,yDArLJ,2DAyMbmC,iBAzMa,sBAyMM,4BAAAhH,EAAA,6DACTuC,EAAO5C,EAAMoG,UAAUxD,KAC7B,EAAKsC,SAAU,EAFA,kBAILnD,EAAMC,WAAWQ,OAAO,EAAKwC,iBAAkB5C,IAJ1C,OAMX+D,aAAY,WAAO,IAAD,EACd,aAAG,EAAKnB,wBAAR,aAAG,EAAuBqB,QAAQ,CAAC,IAAD,EAC9B,EAAKrB,iBAAiBsB,UAAtB,UACA,EAAKtB,iBAAiBsB,iBADtB,aACA,EAAiCgB,QAAO,SAAAV,GAAC,OAAIA,EAAE3D,YAAF,OAAeL,QAAf,IAAeA,OAAf,EAAeA,EAAMK,aAClE,EAAK+B,iBAAiBqB,SAAU,MAC7B,CAAC,IAAD,IACGW,EAAW,IAAItC,EAAQ9B,GAC7B,YAAKoC,wBAAL,mBAAuBsB,iBAAvB,SAAkCvF,KAAKiG,GACvC,EAAKhC,iBAAkBqB,SAAU,EAGrC,EAAKvB,iBAAiBO,IAAI,EAAKL,iBAAkB5C,GAAI,EAAK4C,qBAjBnD,gDAqBXlC,QAAQC,IAAR,MArBW,yBAuBXoD,aAAY,kBAAM,EAAKjB,SAAU,KAvBtB,4EAzMN,KAoObqC,qBApOa,sBAoOU,sBAAAlH,EAAA,6DACnB,EAAK6E,SAAU,EADI,kBAGTnD,EAAMC,WAAWQ,OAAO,EAAKwC,iBAAkB5C,IAHtC,OAKf+D,aAAY,WAAO,IAAD,EACd,EAAKnB,iBAAkBwC,cAAc,UAAC,EAAKxC,wBAAN,aAAC,EAAuBwC,aAC7D,EAAK1C,iBAAiBO,IAAI,EAAKL,iBAAkB5C,GAAI,EAAK4C,qBAP/C,gDAUflC,QAAQC,IAAR,MAVe,yBAafoD,aAAY,kBAAM,EAAKjB,SAAU,KAblB,4EApOV,KAqPbuC,sBAAwB,WACpB,EAAKzC,sBAAmBb,GAtPf,KAyPbuD,wBAA0B,SAACzE,GACvB,EAAK6B,iBAAiBW,SAAQ,SAAAnD,GAC1BA,EAASgE,UAAUb,SAAQ,SAAAuB,GACpBA,EAAS/D,WAAaA,IACrB+D,EAASW,UAAYX,EAASY,iBAAmBZ,EAASY,iBAC1DZ,EAASW,WAAaX,EAASW,kBA7P3CE,YAAmB1I,MAEnB2I,aACI,kBAAM,EAAKlE,UAAUmE,UACrB,WACI,EAAK3C,aAAe,IAAIhG,EACxB,EAAK0F,iBAAiBkD,QACtB,EAAKrC,oB,kDAKjB,WACI,OAAOsC,MAAMC,KAAK/I,KAAK2F,iBAAiBqD,UAAUC,MAAK,SAAC/H,EAAGgI,GAAJ,OAAUhI,EAAEkE,KAAM+D,UAAYD,EAAE9D,KAAM+D,e,6BAEjG,WACI,OAAOtE,OAAOuE,QACVpJ,KAAKqJ,iBAAiBC,QAAO,SAACC,EAAYpG,GACtC,IAAMiC,EAAOoE,kBAAOrG,EAASiC,KAAO,eAEpC,OADAmE,EAAWnE,GAAQmE,EAAWnE,GAAX,sBAAuBmE,EAAWnE,IAAlC,CAAyCjC,IAAY,CAACA,GAClEoG,IACR,O,uBAIX,WACI,IAAMxG,EAAS,IAAI0G,gBAWnB,OATA1G,EAAOoB,OAAO,aAAcnE,KAAKiG,aAAa/F,WAAWwJ,YACzD3G,EAAOoB,OAAO,WAAYnE,KAAKiG,aAAa9F,SAASuJ,YACrD1J,KAAKyE,UAAU6B,SAAQ,SAACF,EAAOtE,GAChB,cAARA,EACCiB,EAAOoB,OAAOrC,EAAMsE,EAAeuD,eAEnC5G,EAAOoB,OAAOrC,EAAKsE,MAGpBrD,M,cCrDM6G,E,WAajB,aAAc,IAAD,gCAZbC,QAA0B,KAYb,KAXbC,gBAAiB,EAWJ,KAVbC,WAAY,EAUC,KATbhE,SAAU,EASG,KARbiE,UAAW,EAQE,KAPbC,WAAwB,GAOX,KANbC,mBAA6B,EAMhB,KALbC,mBAA6B,EAKhB,KAJbC,UAAY,EAIC,KAHbC,aAAe,EAGF,KAFbd,WAAgC,GAEnB,KAkCb/C,eAlCa,uCAkCI,WAAO1C,EAAkBW,GAAzB,SAAAvD,EAAA,sEAET,EAAKiJ,mBAAoB,EAFhB,SAGevH,EAAMiB,SAASa,cAAcZ,EAAUW,GAHtD,OAGT,EAAK8E,WAHI,OAKTvC,aAAY,WACR,EAAKmD,mBAAoB,KANpB,gDASTxG,QAAQC,IAAR,MACAoD,aAAY,WACR,EAAKmD,mBAAoB,KAXpB,yDAlCJ,6DAkDbG,aAAe,SAACF,GACZ,EAAKA,UAAYA,GAnDR,KAqDbG,eAAiB,SAACF,GACd,EAAKA,YAAcA,GAtDV,KAkEbG,YAlEa,uCAkEC,WAAO1G,GAAP,eAAA5C,EAAA,6DACV,EAAK4I,gBAAiB,EADZ,kBAGgBlH,EAAMiB,SAASvB,IAAIwB,GAHnC,OAGA+F,EAHA,OAKN7C,aAAY,WACR,EAAK6C,QAAUA,EACf,EAAKC,gBAAiB,KAE1B,EAAKtD,eAAe,EAAKqD,QAAS/F,SAAU,UATtC,gDAWNH,QAAQC,IAAR,MACAoD,aAAY,kBAAM,EAAK8C,gBAAiB,KAZlC,yDAlED,2DAkFb/F,YAlFa,uCAkFC,WAAOC,GAAP,iBAAA9C,EAAA,6DACV,EAAK6I,WAAY,EADP,kBAGiBnH,EAAMiB,SAASE,YAAYC,GAH5C,OAGA/C,EAHA,OAIAwJ,EAAQxJ,EAASnB,KAEvBkH,aAAY,WACS,IAAD,EAAb,EAAK6C,UACJ,YAAKA,QAAQa,cAAb,SAAqB9I,KAAK6I,GACvBA,EAAME,QAAU9J,EAAMoG,UAAUxD,OAChC5C,EAAMoG,UAAU2D,SAASH,EAAMpI,KAC/B,EAAKwH,QAAQpE,MAAQgF,EAAMpI,KAE9B,EAAK0H,WAAY,MAbnB,gDAkBNpG,QAAQC,IAAR,MACAoD,aAAY,kBAAM,EAAK+C,WAAY,KAnB7B,yDAlFD,2DAyGb3F,aAzGa,uCAyGE,WAAOqG,GAAP,SAAAvJ,EAAA,6DACX,EAAK6E,SAAU,EADJ,kBAIDnD,EAAMiB,SAASO,aAAaqG,EAAMxH,IAJjC,OAMPpC,EAAMoG,UAAU2D,SAASH,EAAMpI,KAE/B2E,aAAY,WACL,EAAK6C,SAAW,EAAKA,QAAQa,SAE5B,EAAKb,QAAQa,OAAOlD,MAAK,SAAAqD,GAAC,OAAIA,EAAEF,UAASA,QAAS,EAClD,EAAKd,QAAQa,OAAOlD,MAAK,SAAAqD,GAAC,OAAIA,EAAE5H,KAAOwH,EAAMxH,MAAK0H,QAAS,EAE3D,EAAKd,QAAQpE,MAAQgF,EAAMpI,IAC3B,EAAK0D,SAAU,MAfhB,gDAmBPpC,QAAQC,IAAR,MACAoD,aAAY,kBAAM,EAAKjB,SAAU,KApB1B,yDAzGF,2DAiIb1B,YAjIa,uCAiIC,WAAOpB,GAAP,SAAA/B,EAAA,6DACV,EAAK8I,UAAW,EADN,kBAIApH,EAAMiB,SAASQ,YAAYpB,GAJ3B,OAMN+D,aAAY,WAAO,IAAD,IACd,EAAK6C,QAASa,OAAd,UAAuB,EAAKb,eAA5B,iBAAuB,EAAca,cAArC,aAAuB,EAAsBvC,QAAO,SAAAsC,GAAK,OAAIA,EAAMxH,KAAOA,KAC1E,EAAK+G,UAAW,KARd,gDAWNrG,QAAQC,IAAR,MACAoD,aAAY,kBAAM,EAAKgD,UAAW,KAZ5B,yDAjID,2DAiJb1F,cAjJa,uCAiJG,WAAOwG,GAAP,iBAAA5J,EAAA,6DACZ,EAAK6E,SAAU,EADH,kBAIYnD,EAAMiB,SAASS,cAAcwG,GAJzC,cAIJjB,EAJI,gBAKSjH,EAAMU,QAAQC,UALvB,OAKJE,EALI,OAMRuD,aAAY,WACL6C,IACC,EAAKA,QAAUA,EACfhJ,EAAMoG,UAAUxD,KAAOA,EACvB,EAAKsC,SAAU,MAVf,wDAgBRiB,aAAY,kBAAM,EAAKjB,SAAQ,KAhBvB,+DAjJH,2DAsKbxB,gBAtKa,uCAsKK,WAAOT,EAAkB0E,GAAzB,SAAAtH,EAAA,6DACd,EAAK6E,SAAU,EADD,kBAGJnD,EAAMiB,SAASU,gBAAgBT,GAH3B,OAIVjD,EAAMkK,cAAcxC,wBAAwBzE,GAC5CkD,aAAY,WAAO,IAAD,IACX,EAAK6C,SAAW,EAAKA,QAAQ/F,YAAb,UAA0BjD,EAAMoG,UAAUxD,YAA1C,aAA0B,EAAsBK,WAAY,EAAK+F,QAAQ/F,WAAaA,IACrG0E,EAAY,EAAKqB,QAAQpB,iBAAmB,EAAKoB,QAAQpB,iBACzD,EAAKoB,QAAQrB,WAAa,EAAKqB,QAAQrB,WAGxC,EAAKqB,SAAW,EAAKA,QAAQ/F,YAAb,UAA0BjD,EAAMoG,UAAUxD,YAA1C,aAA0B,EAAsBK,YAC/D0E,EAAY,EAAKqB,QAAQmB,iBAAmB,EAAKnB,QAAQmB,kBAE7D,EAAKf,WAAW3D,SAAQ,SAAAuD,GACjBA,EAAQ/F,WAAaA,IACpB+F,EAAQrB,UAAYqB,EAAQpB,iBAAmBoB,EAAQpB,iBACvDoB,EAAQrB,WAAaqB,EAAQrB,cAGrC,EAAKzC,SAAU,KApBT,gDAuBVpC,QAAQC,IAAR,MACAoD,aAAY,kBAAM,EAAKjB,SAAU,KAxBvB,yDAtKL,6DAmMbkF,eAnMa,uCAmMI,WAAOxG,GAAP,eAAAvD,EAAA,6DACb,EAAKgJ,mBAAoB,EADZ,SAEgBtH,EAAMiB,SAASW,eAAe,EAAKqF,QAAS/F,SAAUW,GAFtE,OAEHwF,EAFG,OAITjD,aAAY,WACR,EAAKiD,WAAaA,EAClBtG,QAAQC,IAAIqG,GACZ,EAAKC,mBAAoB,KAPpB,2CAnMJ,sDACTxB,YAAmB1I,MAEnB2I,aACI,kBAAM,EAAKyB,aACX,SAAAA,GACA,GAAiB,IAAdA,GAAiC,IAAdA,EACtB,CACI,IAAM3F,EAA0B,IAAd2F,EAAkB,YAAc,YAClD,EAAKa,eAAexG,QAEpB,EAAKwF,WAAa,MAI1BtB,aACI,kBAAM,EAAK0B,eACX,SAAAA,GACmB,IAAhBA,EAEC,EAAK7D,eAAe,EAAKqD,QAAS/F,SAAU,UAExB,IAAhBuG,EACJ,EAAK7D,eAAe,EAAKqD,QAAS/F,SAAU,QAExB,IAAhBuG,EACJ,EAAK7D,eAAe,EAAKqD,QAAS/F,SAAU,WAG5C,EAAKmG,WAAa,M,+CA4B9B,WACI,SAAGpJ,EAAMoG,UAAUxD,OAAQzD,KAAK6J,UAErBhJ,EAAMoG,UAAUxD,KAAKK,WAAa9D,KAAK6J,QAAQ/F,a,KCzE7CoH,E,WAGjB,aAAc,IAAD,gCAFbzH,KAAoB,KAEP,KAQbD,MARa,uCAQL,WAAM2H,GAAN,eAAAjK,EAAA,+EAEmB0B,EAAMU,QAAQE,MAAM2H,GAFvC,OAEM1H,EAFN,OAGA5C,EAAMC,YAAYsK,SAAS3H,EAAK7C,OAChCoG,aAAY,WACR,EAAKvD,KAAOA,KAEhB9B,GAAQC,KAAK,eACbf,EAAMwK,WAAWC,aARjB,uHARK,2DAsBbC,OAAS,WACL1K,EAAMC,YAAYsK,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,OAC/B,EAAKjI,KAAO,KACZ9B,GAAQC,KAAK,MA1BJ,KA8Bb+J,QA9Ba,sBA8BH,4BAAAzK,EAAA,+EAEiB0B,EAAMU,QAAQC,UAF/B,OAEIE,EAFJ,OAIFuD,aAAY,kBAAM,EAAKvD,KAAOA,KAJ5B,gDAMFE,QAAQC,IAAR,MANE,yDA9BG,KAwCbF,SAxCa,uCAwCF,WAAOyH,GAAP,eAAAjK,EAAA,+EAEgB0B,EAAMU,QAAQI,SAASyH,GAFvC,OAEG1H,EAFH,OAGH5C,EAAMC,YAAYsK,SAAS3H,EAAK7C,OAChCoG,aAAY,WACR,EAAKvD,KAAOA,KAEhB9B,GAAQC,KAAK,eACbf,EAAMwK,WAAWC,aARd,uHAxCE,2DAsDbV,SAAW,SAACnF,GACN,EAAKhC,OAAM,EAAKA,KAAKgC,MAAQA,IAtD/BiD,YAAmB1I,M,4CAGvB,WACI,QAASA,KAAKyD,S,KCGT5C,EAAe,CACxBkK,cAAe,IAAIrF,EACnB5E,YAAa,ICXb,aAAc,IAAD,gCAJbO,MAA4B,KAIf,KAHbT,MAAuB4K,OAAOC,aAAaG,QAAQ,OAGtC,KAFbC,WAAW,EAEE,KAWb7J,eAAiB,SAACX,GACd,EAAKA,MAAQA,GAZJ,KAeb+J,SAAW,SAACxK,GACLA,GAAO4K,OAAOC,aAAaK,QAAQ,MAAOlL,GAC7C,EAAKA,MAAQA,GAjBJ,KAoBbmL,aAAe,WACX,EAAKF,WAAY,GApBjBnD,YAAmB1I,MACnB2I,aAAS,kBAAM,EAAK/H,SACpB,SAAAA,GACOA,EACC4K,OAAOC,aAAaK,QAAQ,MAAOlL,GAEnC4K,OAAOC,aAAaC,WAAW,WDK3CzE,UAAW,IAAIiE,EACfG,WAAY,IERZ,aAAc,IAAD,gCALbW,MAAe,CACXC,MAAM,EACNzJ,KAAM,MAGG,KAIb0J,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAMxJ,KAAO2J,GANT,KASbb,WAAa,WACT,EAAKU,MAAMC,MAAO,EAClB,EAAKD,MAAMxJ,KAAO,MAVlBkG,YAAmB1I,OFQvBoM,aAAc,IAAIxC,EAClByC,aAAc,IGbd,aAAc,IAAD,gCAHbC,SAA0B,GAGb,KAFbC,cAAsC,KAEzB,KAIbC,oBAAsB,SAACC,GAChB5L,EAAMkK,cAAclF,mBAEnB,EAAK0G,eAAgB,IAAIG,KACxBC,QAAQpM,oBAAiDkM,EAAW,CACjEG,mBAAoB,kCAAM/L,EAAMoG,UAAUxD,YAAtB,aAAM,EAAsB7C,SAEnDiM,yBACAC,iBAAiBC,IAASC,aAC1BC,QAED,EAAKV,cAAcW,QAAQC,OAAM,SAAA9L,GAAK,OAAIsC,QAAQC,IAAI,sCAAuCvC,MAE7F,EAAKkL,cAAca,GAAG,gBAAgB,SAACd,GACnCtF,aAAY,WACRsF,EAAShG,SAAQ,SAAA+G,GACbA,EAAQC,UAAY,IAAI5F,KAAK2F,EAAQC,UAAY,QAErD,EAAKhB,SAAWA,QAGxB,EAAKC,cAAca,GAAG,kBAAkB,SAACC,GACrCrG,aAAY,WAERqG,EAAQC,UAAY,IAAI5F,KAAK2F,EAAQC,WACrC,EAAKhB,SAASiB,QAAQF,WA7BzB,KAmCbG,kBAAoB,WAAO,IAAD,EACtB,YAAKjB,qBAAL,SAAoBkB,OAAON,OAAM,SAAA9L,GAAK,OAAIsC,QAAQC,IAAI,8BAA+BvC,OApC5E,KAuCbqM,cAAgB,WACZ,EAAKpB,SAAW,GAChB,EAAKkB,qBAzCI,KA2CbG,UA3Ca,uCA2CD,WAAO3E,GAAP,iBAAA9H,EAAA,6DACR8H,EAAOyD,WAAP,UAAoB5L,EAAMkK,cAAclF,wBAAxC,aAAoB,EAAsC5C,GADlD,4BAIE,EAAKsJ,qBAJP,aAIE,EAAoBqB,OAAO,cAAe5E,GAJ5C,sDAMJrF,QAAQC,IAAR,MANI,wDA3CC,sDACT8E,YAAmB1I,QHed6N,EAAeC,wBAAcjN,GAEnC,SAASkN,IACZ,OAAOC,qBAAWH,G,WItBPI,eAAS,WACpB,MAAwCF,IAAhC9G,UAAaxD,EAArB,EAAqBA,KAAM8H,EAA3B,EAA2BA,OAC3B,OACI,cAAC2C,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,IAAIC,OAAK,EAACC,QAAM,EAA3C,UACI,qBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEC,YAAa,MADjE,kBAIA,cAACb,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,cAAcO,KAAK,eAC9C,cAACd,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,UAAUO,KAAK,WAC1C,cAACd,EAAA,EAAKI,KAAN,UACI,cAACW,EAAA,EAAD,CAAQV,GAAIC,IAASC,GAAG,kBAAkBS,UAAQ,EAAC/C,QAAQ,sBAG/D,eAAC+B,EAAA,EAAKI,KAAN,CAAWa,SAAS,QAApB,UACI,cAACC,EAAA,EAAD,CAAOR,KAAS,OAAJnL,QAAI,IAAJA,OAAA,EAAAA,EAAMgC,QAAS,mBAAoB4J,QAAM,EAACC,OAAO,UAC7D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAEhM,QAAF,IAAEA,OAAF,EAAEA,EAAM+B,YAA1C,SACI,eAAC+J,EAAA,EAASrB,KAAV,WACI,cAACqB,EAAA,EAASjB,KAAV,CAAeC,GAAImB,IAAMjB,GAAE,2BAAehL,QAAf,IAAeA,OAAf,EAAeA,EAAMK,UAAY2L,KAAK,YAAYE,KAAK,SAClF,cAACJ,EAAA,EAASjB,KAAV,CAAesB,QAASrE,EAAQoE,KAAK,0B,8DCpBlD1B,eAAS,WAEpB,MAAuDF,IAA/ChD,cAAiBtG,EAAzB,EAAyBA,UAAW0B,EAApC,EAAoCA,aACpC,OACI,qCACI,eAAC+H,EAAA,EAAD,CAAM2B,UAAQ,EAACC,KAAK,QAAQhB,MAAO,CAAEiB,MAAO,OAAQC,UAAW,IAA/D,UACI,cAACC,EAAA,EAAD,CAAQN,KAAK,SAASO,UAAQ,EAACC,MAAM,OAAOhE,QAAQ,YACpD,cAAC+B,EAAA,EAAKI,KAAN,CACInC,QAAQ,iBACRiE,OAAQ3L,EAAU4L,IAAI,OACtBT,QAAS,kBAAMzJ,EAAa,MAAO,WAEvC,cAAC+H,EAAA,EAAKI,KAAN,CACInC,QAAQ,YACRiE,OAAQ3L,EAAU4L,IAAI,WACtBT,QAAS,kBAAMzJ,EAAa,UAAW,WAE3C,cAAC+H,EAAA,EAAKI,KAAN,CACInC,QAAQ,cACRiE,OAAQ3L,EAAU4L,IAAI,UACtBT,QAAS,kBAAMzJ,EAAa,SAAU,cAG9C,cAAC8J,EAAA,EAAD,IACA,cAAC,IAAD,CACIK,SAAU,SAAClL,GAAD,OAAgBe,EAAa,YAAaf,IACpDgB,MAAO3B,EAAUnC,IAAI,cAAgB,IAAIoF,a,8ECvB1CuG,gBAAS,YAA2C,IAAD,EAAlBpE,EAAkB,EAAlBA,QAC5C,EAAoCkE,IAA5B3B,EAAR,EAAQA,aAAcnF,EAAtB,EAAsBA,UACd1C,EAA6B6H,EAA7B7H,gBAAiBwB,EAAYqG,EAAZrG,QAEzB,IAAI,UAAAkB,EAAUxD,YAAV,eAAgBK,YAAa+F,EAAQ/F,SAAU,OAAO,KAM1D,OACI,eAACyM,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACI,cAACD,GAAA,EAAOE,QAAR,CAAgBC,SAAO,EAAC5B,MAAO,CAAEiB,MAAO,QAAxC,SACI,cAACd,EAAA,EAAD,CACI0B,OAAK,EACLR,MAAM,OACNhE,QAAStC,EAAQrB,UAAY,YAAc,oBAGnD,cAAC+H,GAAA,EAAOE,QAAR,CAAgBG,QAAM,EAAC9B,MAAO,CAAEiB,MAAO,QAAvC,SACI,cAACd,EAAA,EAAD,CACI0B,OAAK,EACLR,MAAOtG,EAAQrB,UAAY,MAAQ,QACnC2D,QAAStC,EAAQrB,UAAY,WAAa,SAC1CzC,QAASA,EACT6J,QAAS,SAACiB,GAAD,OAnBzB,SAAsBA,EAAmB/M,GACrC+M,EAAEC,iBACFjH,EAAQrB,UAAYjE,EAAgBT,GAAU,GAASS,EAAgBT,GAAU,GAiBrDiN,CAAaF,EAAGhH,EAAQ/F,qBCxB7CmK,gBAAS,YAA0C,IAAnBpE,EAAkB,EAAlBA,QAE3C,OACI,eAACmH,GAAA,EAAD,CAAMzC,GAAImB,IAAMjB,GAAE,oBAAe5E,EAAQ/F,UAAzC,UACI,cAACsL,EAAA,EAAD,CAAOR,IAAK/E,EAAQpE,OAAS,qBAC7B,eAACuL,GAAA,EAAKP,QAAN,WACI,cAACO,GAAA,EAAKf,OAAN,UAAcpG,EAAQrE,cACtB,cAACwL,GAAA,EAAKC,YAAN,UAAmBpH,EAAQqH,IAAMrH,EAAQqH,IAAIC,OAAO,EAAG,IAAM,MAAQ,qBAGzE,cAACH,GAAA,EAAKP,QAAN,CAAcW,OAAK,EAAnB,SACI,eAACC,GAAA,EAAD,CAAMrC,KAAK,OAAX,UACKnF,EAAQpB,eADb,kBAIJ,cAAC,GAAD,CAAcoB,QAASA,UCdpBoE,gBAAS,YAAyD,IAArB9G,EAAoB,EAApBA,UAElDmK,EAAS,CACXC,YAAa,SACbC,YAAa,GAGjB,OACI,cAACC,GAAA,EAAD,CAAMC,YAAU,EAAhB,SACKvK,EAAUwK,KAAI,SAAA9J,GAAQ,OACnB,cAAC+J,GAAA,EAAD,CACIC,WAAS,EAETC,QACI,cAACL,GAAA,EAAKnD,KAAN,CAAmCC,GAAImB,IAAMjB,GAAE,oBAAe5G,EAAS/D,UAAvE,SACI,cAACsL,EAAA,EAAD,CACIU,KAAK,OACLiC,UAAQ,EACRnD,IAAK/G,EAASpC,OAAS,mBACvBuM,UAAQ,EACRlD,MAAOjH,EAASW,UAAY8I,EAAS,QAN7BzJ,EAAS/D,UAJjC,SAcI,cAAC8N,GAAA,EAAMnB,QAAP,UACI,cAAC,GAAD,CAAa5G,QAAShC,OAbrBA,EAAS/D,kBCXnB,SAASmO,GAAT,GAAgD,IAAD,MAAnB9O,EAAmB,EAAnBA,SAGvC,OACI,eAAC+O,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,WACK/O,EAASkF,aACN,cAAC+J,GAAA,EAAD,CAAOlC,SAAS,MAAMC,MAAM,MAAMhE,QAAQ,YAAY2C,MAAO,CAAEuD,UAAW,YAC9E,cAAC/D,GAAA,EAAK6D,MAAN,UACI,eAAC7D,GAAA,EAAD,WACI,cAACA,GAAA,EAAKc,MAAN,CAAYN,MAAO,CAAEwD,aAAc,GAAKxC,KAAK,OAAOiC,UAAQ,EAACnD,KAAK,UAAAzL,EAASoE,YAAT,eAAe9B,QAAS,qBAC1F,eAAC6I,GAAA,EAAKmC,QAAN,WACI,cAACnC,GAAA,EAAK2B,OAAN,CAAa1B,GAAImB,IAAMjB,GAAE,sBAAiBtL,EAASF,IAAnD,SACKE,EAAS8B,QAGd,eAACqJ,GAAA,EAAK2C,YAAN,wBAA4B,cAAC,IAAD,CAAMxC,GAAE,2BAAetL,QAAf,IAAeA,GAAf,UAAeA,EAAUoE,YAAzB,aAAe,EAAgBzD,UAAvC,mBAAoDX,EAASoE,YAA7D,aAAoD,EAAe/B,iBAC9FrC,EAASkE,QACN,cAACiH,GAAA,EAAK2C,YAAN,UACI,cAACmB,GAAA,EAAD,CAAOG,OAAK,EAACpC,MAAM,SAAnB,6CAKPhN,EAAS+D,UAAY/D,EAASkE,QAC3B,cAACiH,GAAA,EAAK2C,YAAN,UACI,cAACmB,GAAA,EAAD,CAAOG,OAAK,EAACpC,MAAM,QAAnB,mDAjBLhN,EAASF,SA0B5B,cAACiP,EAAA,EAAD,UACI,iCACI,cAACb,GAAA,EAAD,CAAMrC,KAAK,UADf,IAC2BxF,kBAAOrG,EAASiC,KAAO,wBAC9C,cAACiM,GAAA,EAAD,CAAMrC,KAAK,WAFf,IAE4B7L,EAASmC,WAGzC,cAAC4M,EAAA,EAAD,CAASM,WAAS,EAAlB,SACI,cAAC,GAAD,CAA0BrL,UAAWhE,EAASgE,cAElD,eAAC+K,EAAA,EAAD,CAASO,UAAQ,EAAjB,UACI,+BAAOtP,EAASgC,cAChB,cAAC8J,EAAA,EAAD,CAAQV,GAAImB,IACRjB,GAAE,sBAAiBtL,EAASF,IAC5BkN,MAAM,OACNuC,QAAQ,QACRvG,QAAQ,eCxDb8B,oBAAU,WAGrB,IACO0E,EADiB5E,IAAjBhD,cACA4H,kBAEP,OACI,mCACCA,EAAkBhB,KAAI,mCAAEiB,EAAF,KAASrJ,EAAT,YACnB,eAAC,WAAD,WACI,cAAC0G,EAAA,EAAD,CAAQ4C,KAAG,EAAC1C,MAAM,OAAlB,SACKyC,IAEArJ,EAAWoI,KAAI,SAAAxO,GAAQ,OACpB,cAAC8O,GAAD,CAAoC9O,SAAUA,GAAvBA,EAASF,SAL7B2P,W,UCbZ,SAASE,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAapC,OAAK,EAAC7B,MAAO,CAAEkB,UAAW,IAAvC,SACI,eAACkC,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAASpD,MAAO,CAAEkE,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAY9C,OAAb,CAAoBxK,OAAK,EAAzB,UACI,cAACsN,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAACf,EAAA,EAAD,UACI,eAACa,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAACf,EAAA,EAAD,CAASM,WAAS,EAAC1D,MAAO,CAAEkE,UAAW,MACvC,cAACd,EAAA,EAAD,CAASO,UAAQ,EAAjB,SACI,cAACxD,EAAA,EAAD,CAAQkE,UAAQ,EAAChD,MAAM,OAAOuC,QAAQ,QAAQvG,QAAQ,kBCf/D8B,oBAAS,WAEpB,IAAQlD,EAAkBgD,IAAlBhD,cACAvE,EAAkEuE,EAAlEvE,eAAgBb,EAAkDoF,EAAlDpF,iBAAkBY,EAAgCwE,EAAhCxE,gBAAiBxG,EAAegL,EAAfhL,WAC3D,EAAsCqT,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAcA,OANAC,qBAAU,WACF5N,EAAiBmK,MAAQ,GAAGtJ,MACjC,CAACb,EAAiBmK,KAAMtJ,IAKvB,eAACgN,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa1D,MAAM,KAAnB,SACKhF,EAAc/E,iBAAmBqN,EAC9B,qCACI,cAACP,GAAD,IACA,cAACA,GAAD,OAIA,cAAC,IAAD,CACIY,UAAW,EACXC,SAxBxB,WACIL,GAAe,GACf/M,EAAgB,IAAItG,EAAaF,EAAY6T,YAAc,IAC3DpN,IAAiBjE,MAAK,kBAAM+Q,GAAe,OAsBvBO,SAAUR,KAAiBtT,GAAcA,EAAW6T,YAAc7T,EAAW+T,WAC7EC,aAAa,EAJjB,SAMI,cAAC,GAAD,QAOhB,cAACP,EAAA,EAAKC,OAAN,CAAa1D,MAAM,IAAnB,SACI,cAAC,EAAD,MAEJ,cAACyD,EAAA,EAAKC,OAAN,CAAa1D,MAAO,GAApB,SACI,cAACiE,EAAA,EAAD,CAAQ5D,OAAQiD,Y,4BC9CjB,SAASY,GAAaC,GACjC,MAAsBC,aAASD,EAAMlF,MAArC,mBAAOoF,EAAP,KAAcC,EAAd,KAEA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAYlT,MAAOgT,EAAKG,WAAaH,EAAKhT,MAA1C,UACI,gCAAQ6S,EAAMO,QACd,iDAAWL,GAAWF,IACrBG,EAAKG,SAAWH,EAAKhT,MACrB,cAAC+Q,GAAA,EAAD,CAAOG,OAAK,EAACpC,MAAM,MAAnB,SAA0BkE,EAAKhT,QAAiB,QCZ9C4M,oBAAS,WAEpB,IAAOhH,EAAa8G,IAAb9G,UACP,OACI,cAAC,KAAD,CACAyN,cAAe,CAACC,MAAO,GAAIC,SAAU,GAAIvT,MAAO,MAChDwT,SAAU,SAAC7L,EAAD,OAAU8L,EAAV,EAAUA,UAAV,OAAyB7N,EAAUzD,MAAMwF,GAAQmE,OAAM,SAAA9L,GAAK,OACjEyT,EAAU,CAACzT,MAAO,kCAHvB,SAKK,gBAAE0T,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAcvT,EAA9B,EAA8BA,OAA9B,OACG,eAAC,KAAD,CAAMwT,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACjF,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,wBAAwBgE,MAAM,OAAOkC,UAAU,WAD3E,uBAC0G,cAAC4B,GAAD,CAAajF,KAAK,QAAQmG,YAAY,UAC5I,cAAClB,GAAD,CAAajF,KAAK,WAAWmG,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACApG,KAAK,QAAQqG,OAAQ,kBACrB,cAACjD,GAAA,EAAD,CAAOtD,MAAO,CAACwD,aAAc,IAC7BC,OAAK,EAACpC,MAAM,MACZhE,QAAS1K,EAAOJ,WAGhB,cAAC4N,EAAA,EAAD,CAAQlJ,QAASiP,EAAc9F,UAAQ,EAAC/C,QAAQ,QAAQiJ,KAAK,SAASzE,OAAK,a,6BCpBhF,SAAS2E,GAAT,GACd,IADyC7T,EAC1C,EAD0CA,OAEtC,OACI,cAAC8T,GAAA,EAAD,CAASlU,OAAK,EAAd,SACKI,GACG,cAAC+T,GAAA,EAAD,UACK/T,EAAOkQ,KAAI,SAAC8D,EAAUC,GACnB,OAAO,cAACH,GAAA,EAAQjH,KAAT,UAAuBmH,GAAJC,UCLnCzH,oBAAS,WAEpB,IAAOhH,EAAa8G,IAAb9G,UACP,OACI,cAAC,KAAD,CACAyN,cAAe,CAAClP,YAAa,GAAI1B,SAAU,GAAG6Q,MAAO,GAAIC,SAAU,GAAIvT,MAAO,MAC9EwT,SAAU,SAAC7L,EAAD,OAAU8L,EAAV,EAAUA,UAAV,OAAyB7N,EAAUvD,SAASsF,GAAQmE,OAAM,SAAA9L,GAAK,OACpEyT,EAAU,CAACzT,cACXsU,iBAAkBC,KAAW,CACzBpQ,YAAaoQ,OAAaC,WAC1B/R,SAAU8R,OAAaC,WACvBlB,MAAOiB,OAAaC,WAAWlB,QAC/BC,SAAUgB,OAAaC,aARhC,SAWK,gBAAEd,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAcvT,EAA9B,EAA8BA,OAAQqU,EAAtC,EAAsCA,QAASC,EAA/C,EAA+CA,MAA/C,OACG,eAAC,KAAD,CAAMd,UAAU,gBAAgBJ,SAAUE,EAAcG,aAAa,MAArE,UACI,cAACjF,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,sBAAsBgE,MAAM,OAAOkC,UAAU,WACrE,cAAC4B,GAAD,CAAajF,KAAK,cAAcmG,YAAY,iBAC5C,cAAClB,GAAD,CAAajF,KAAK,WAAWmG,YAAY,aACzC,cAAClB,GAAD,CAAajF,KAAK,QAAQmG,YAAY,UACtC,cAAClB,GAAD,CAAajF,KAAK,WAAWmG,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACApG,KAAK,QAAQqG,OAAQ,kBACrB,cAACC,GAAD,CAAkB7T,OAAQA,EAAOJ,WAGjC,cAAC4N,EAAA,EAAD,CAAQkE,UAAW2C,IAAYC,GAASf,EACvCjP,QAASiP,EAAc9F,UAAQ,EAAC/C,QAAQ,WAAWiJ,KAAK,SAASzE,OAAK,aC7B5E1C,gBAAS,WACpB,MAAkCF,IAA1B9G,EAAR,EAAQA,UAAWoE,EAAnB,EAAmBA,WACnB,OACI,eAAC6G,EAAA,EAAD,CAAS/D,UAAQ,EAACkE,UAAU,SAASxC,UAAQ,EAACoF,UAAU,YAAxD,UACI,eAAChF,EAAA,EAAD,CAAQ1B,GAAG,KAAKJ,UAAQ,EAAxB,UACI,cAACiB,EAAA,EAAD,CAAOU,KAAK,UAAUlB,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEwD,aAAc,MADnF,kBAICrL,EAAU+O,WACP,qCACI,cAAC/F,EAAA,EAAD,CAAQ1B,GAAG,KAAKJ,UAAQ,EAAC8H,QAAQ,4BACjC,cAAChH,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,cAAcqB,KAAK,OAAO3B,UAAQ,EAAvD,iCAMA,qCACI,cAACc,EAAA,EAAD,CAAQW,QAAS,kBAAMvE,EAAWa,UAAU,cAAC,GAAD,MAAgB4D,KAAK,OAAO3B,UAAQ,EAAhF,oBAGA,cAACc,EAAA,EAAD,CAAQW,QAAS,kBAAMvE,EAAWa,UAAU,cAAC,GAAD,MAAmB4D,KAAK,OAAO3B,UAAQ,EAAnF,gC,UCrBT,SAAS+H,GAAT,GAA4E,IAAD,IAAhD/H,gBAAgD,aAA/BhC,eAA+B,MAArB,aAAqB,EACtF,OACI,cAACgK,GAAA,EAAD,CAAQ/F,QAAQ,EAAMjC,SAAUA,EAAhC,SACI,cAAC6F,EAAA,EAAD,CAAQ7H,QAASA,M,cCAd,SAASiK,GAAWlC,GAC/B,MAAsBC,aAASD,EAAMlF,MAArC,mBAAOoF,EAAP,KAAcC,EAAd,KAEA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAYlT,MAAOgT,EAAKG,WAAaH,EAAKhT,MAA1C,UACI,gCAAQ6S,EAAMO,QACd,oDAAcL,GAAWF,IACxBG,EAAKG,SAAWH,EAAKhT,MACrB,cAAC+Q,GAAA,EAAD,CAAOG,OAAK,EAACpC,MAAM,MAAnB,SAA0BkE,EAAKhT,QAAiB,Q,cCR9C,SAASgV,GAAcnC,GAClC,MAA+BC,aAASD,EAAMlF,MAA9C,mBAAOoF,EAAP,KAAcC,EAAd,KAAoBiC,EAApB,KAEA,OACI,eAAChC,GAAA,EAAKC,MAAN,CAAYlT,MAAOgT,EAAKG,WAAaH,EAAKhT,MAA1C,UACI,gCAAQ6S,EAAMO,QACd,cAAC8B,GAAA,EAAD,CACAC,WAAS,EACTC,QAASvC,EAAMuC,QACfrQ,MAAOgO,EAAMhO,OAAS,KACtBkK,SAAU,SAACO,EAAG6F,GAAJ,OAAUJ,EAAQK,SAASD,EAAEtQ,QACvCwQ,OAAQ,kBAAMN,EAAQO,YAAW,IACjC1B,YAAajB,EAAMiB,cAElBd,EAAKG,SAAWH,EAAKhT,MACrB,cAAC+Q,GAAA,EAAD,CAAOG,OAAK,EAACpC,MAAM,MAAnB,SAA0BkE,EAAKhT,QAAiB,QC1BtD,IAAMyV,GAAkB,CAC3B,CAACrH,KAAM,SAAUrJ,MAAO,UACxB,CAACqJ,KAAM,UAAWrJ,MAAO,WACzB,CAACqJ,KAAM,OAAQrJ,MAAO,QACtB,CAACqJ,KAAM,OAAQrJ,MAAO,QACtB,CAACqJ,KAAM,QAASrJ,MAAO,SACvB,CAACqJ,KAAM,SAAUrJ,MAAO,W,qBCCb,SAASgQ,GAAWlC,GAC/B,MAA+BC,aAASD,EAAMlF,MAA9C,mBAAOoF,EAAP,KAAcC,EAAd,KAAoBiC,EAApB,KAEA,OACI,eAAChC,GAAA,EAAKC,MAAN,CAAYlT,MAAOgT,EAAKG,WAAaH,EAAKhT,MAA1C,UACI,cAAC,KAAD,uCACQ+S,GACAF,GAFR,IAGI6C,SAAW3C,EAAMhO,OAAS,IAAIsB,KAAK0M,EAAMhO,QAAW,KACpDkK,SAAU,SAAAlK,GAAK,OAAIkQ,EAAQK,SAASvQ,OAEvCiO,EAAKG,SAAWH,EAAKhT,MACrB,cAAC+Q,GAAA,EAAD,CAAOG,OAAK,EAACpC,MAAM,MAAnB,SAA0BkE,EAAKhT,QAAiB,QCF9C4M,oBAAS,WAEpB,IAAQlD,EAAkBgD,IAAlBhD,cACFpJ,EAAUqV,eAERpP,EAAiEmD,EAAjEnD,eAAgBG,EAAiDgD,EAAjDhD,eAAgBjB,EAAiCiE,EAAjCjE,aAAcd,EAAmB+E,EAAnB/E,eAC9C/C,EAAOgU,eAAPhU,GAER,EAAgCmQ,mBAA6B,IAAIrO,GAAjE,mBAAO5B,EAAP,KAAiByD,EAAjB,KAEMsQ,EAAmBtB,KAAW,CAChC3Q,MAAO2Q,OAAaC,SAAS,kCAC7B1Q,YAAayQ,OAAaC,SAAS,wCACnC3Q,SAAU0Q,OAAaC,SAAS,qCAChCzQ,KAAMwQ,OAAaC,SAAS,oBAAoBsB,WAChD7R,MAAOsQ,OAAaC,WACpBxQ,KAAMuQ,OAAaC,aAqBvB,OAlBAtC,qBAAU,WACFtQ,GAAI6D,EAAa7D,GAAIV,MAAK,SAAAY,GAAQ,OAAIyD,EAAY,IAAI7B,EAAmB5B,SAC9E,CAACF,EAAI6D,IAgBJd,EAAuB,cAACkQ,GAAD,CAAkB/J,QAAQ,wBAEjD,eAAC+F,EAAA,EAAD,CAASO,UAAQ,EAAjB,UACI,cAACxC,EAAA,EAAD,CAAQ9D,QAAQ,mBAAmB0G,KAAG,EAAC1C,MAAM,SAC7C,cAAC,KAAD,CACIwF,iBAAkBuB,EAClBE,oBAAkB,EAClB1C,cAAevR,EACf0R,SAAU,SAAA7L,GAAM,OApB5B,SAA0B7F,GACtB,GAAKA,EAASF,GAOV8E,EAAe5E,GAAUZ,MAAK,kBAAMZ,EAAQC,KAAR,sBAA4BuB,EAASF,YAP3D,CACd,IAAI6E,EAAW,2BACR3E,GADQ,IAEXF,GAAIoU,iBAERzP,EAAeE,GAAavF,MAAK,kBAAMZ,EAAQC,KAAR,sBAA4BkG,EAAY7E,SAcvDqU,CAAiBtO,IAJzC,SAMK,gBAAG+L,EAAH,EAAGA,aAAce,EAAjB,EAAiBA,QAASd,EAA1B,EAA0BA,aAAce,EAAxC,EAAwCA,MAAxC,OACG,eAAC,KAAD,CAAMd,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACjB,GAAD,CAAajF,KAAK,QAAQmG,YAAY,UACtC,cAACiB,GAAD,CAAYmB,KAAM,EAAGpC,YAAY,cAAcnG,KAAK,gBACpD,cAACqH,GAAD,CAAeI,QAASK,GAAiB3B,YAAY,WAAWnG,KAAK,aACrE,cAAC,GAAD,CACIwI,gBAAgB,OAChBxI,KAAK,OACLyI,gBAAc,EACdC,YAAY,OACZC,WAAW,yBAEf,cAAC1H,EAAA,EAAD,CAAQ9D,QAAQ,mBAAmB0G,KAAG,EAAC1C,MAAM,SAC7C,cAAC8D,GAAD,CAAakB,YAAY,OAAOnG,KAAK,SACrC,cAACiF,GAAD,CAAakB,YAAY,QAAQnG,KAAK,UACtC,cAACC,EAAA,EAAD,CACIkE,SAAU6B,IAAiBe,IAAUD,EACrC/P,QAASiP,EACTtC,QAAQ,QACRxD,UAAQ,EAACkG,KAAK,SACdjJ,QAAQ,WACZ,cAAC8C,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,cAAciE,QAAQ,QAAQ0C,KAAK,SAASjJ,QAAQ,uBC3ElF8B,gBAAS,YAEb,IAAD,IADN9K,SAAYgE,EACN,EADMA,UAAWI,EACjB,EADiBA,KAGvB,OAAKJ,EAED,qCACI,eAAC+K,EAAA,EAAD,CACIG,UAAU,SACVvD,MAAO,CAAE8I,OAAQ,QACjB1H,SAAS,MACTsC,WAAS,EACTrE,UAAQ,EACRgC,MAAM,OANV,UAQKhJ,EAAU0Q,OARf,IAQ6C,IAArB1Q,EAAU0Q,OAAe,SAAW,SAR5D,YAUA,cAAC3F,EAAA,EAAD,CAAShC,UAAQ,EAAjB,SACI,cAACuB,GAAA,EAAD,CAAMqG,SAAO,EAACC,SAAO,EAArB,SACK5Q,EAAUwK,KAAI,SAAC9J,GAAD,OACX,eAACyG,GAAA,EAAD,CAAMQ,MAAO,CAAEK,SAAU,YAAzB,UACKtH,EAAS/D,YAAT,OAAsByD,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAMzD,WACzB,cAACsO,GAAA,EAAD,CACItD,MAAO,CAAEK,SAAU,YACnBgB,MAAM,SACN6H,OAAO,QAHX,kBAQJ,cAAC5I,EAAA,EAAD,CAAOU,KAAK,OAAOlB,IAAK/G,EAASpC,OAAS,qBAC1C,eAAC6I,GAAA,EAAKmC,QAAN,CAAcwH,cAAc,SAA5B,UACI,cAAC3J,GAAA,EAAK2B,OAAN,CAAa1B,GAAG,KAAhB,SACI,cAAC,IAAD,CAAME,GAAE,mBAAc5G,EAAS/D,UAA/B,SACK+D,EAASrC,gBAGjBqC,EAASW,WACN,cAAC8F,GAAA,EAAK4J,MAAN,CAAYpJ,MAAO,CAAEqB,MAAO,UAA5B,4BAlBgCtI,EAAS/D,oBAhBlD,Q,oBCAZmK,gBAAS,YAAsD,IAAtBxB,EAAqB,EAArBA,WAE5CJ,EAAiB0B,IAAjB1B,aAWR,OATAkH,qBAAU,WAIN,OAHI9G,GACAJ,EAAaG,oBAAoBC,GAE9B,WACHJ,EAAaqB,mBAElB,CAACrB,EAAcI,IAGd,qCACI,cAACyF,EAAA,EAAD,CACIG,UAAU,SACVnC,SAAS,MACT/B,UAAQ,EACRgC,MAAM,OACNrB,MAAO,CAAE8I,OAAQ,QALrB,SAOI,cAAC3H,EAAA,EAAD,sCAEJ,eAACiC,EAAA,EAAD,CAAShC,UAAQ,EAACuC,UAAQ,EAA1B,UACI,cAAC,KAAD,CACIoC,SAAU,SAAC7L,EAAD,OAAWmP,EAAX,EAAWA,UAAX,OACN9L,EAAasB,UAAU3E,GAAQzG,MAAK,kBAAM4V,QAC9CzD,cAAe,CAAElS,KAAM,IACvBmT,iBAAkBC,KAAW,CACzBpT,KAAMoT,OAAaC,aAL3B,SAQK,gBAAGb,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,QAASf,EAA1B,EAA0BA,aAA1B,OACG,cAAC,KAAD,CAAME,UAAU,UAAhB,SACI,cAAC,KAAD,CAAOjG,KAAK,OAAZ,SACK,SAACkF,GAAD,OACG,sBAAKpF,MAAO,CAAEK,SAAU,YAAxB,UACI,cAAC6E,EAAA,EAAD,CAAQ5D,OAAQ4E,IAChB,kDACIG,YAAY,kEACZoC,KAAM,GACFrD,EAAME,OAHd,IAIIgE,WAAY,SAAAvH,GACM,UAAVA,EAAE/O,KAAmB+O,EAAEwH,UAEb,UAAVxH,EAAE/O,KAAoB+O,EAAEwH,WACxBxH,EAAEC,iBACFgF,GAAWf,oBAY/C,cAACuD,GAAA,EAAQnG,MAAT,UACK9F,EAAaC,SAASqF,KAAI,SAAAtE,GAAO,OAC9B,eAACiL,GAAA,EAAD,WACI,cAACA,GAAA,EAAQC,OAAT,CAAgB3J,IAAKvB,EAAQ5H,OAAS,qBACtC,eAAC6S,GAAA,EAAQ7H,QAAT,WACI,cAAC6H,GAAA,EAAQE,OAAT,CAAgBjK,GAAImB,IAAMjB,GAAE,oBAAepB,EAAQvJ,UAAnD,SACKuJ,EAAQ7H,cAEb,cAAC8S,GAAA,EAAQG,SAAT,UACI,8BAAMC,aAAoBrL,EAAQC,WAAa,WAEnD,cAACgL,GAAA,EAAQK,KAAT,CAAc7J,MAAO,CAAE8J,WAAY,YAAnC,SAAkDvL,EAAQ7K,OAC1D,cAAC8V,GAAA,EAAQO,QAAT,UACI,cAACP,GAAA,EAAQQ,OAAT,2BAXEzL,EAAQpK,kBCpExC8V,GAAqB,CACvB5Q,OAAQ,mBAGN6Q,GAAyB,CAC3B7J,SAAU,WACV8J,OAAQ,KACRC,KAAM,KACNnJ,MAAO,OACPoJ,OAAQ,OACRhJ,MAAO,SAOIlC,gBAAS,YAAsD,IAAD,IAAnB9K,EAAmB,EAAnBA,SACtD,EAA+E4K,IAAvEhD,cAAiB7C,EAAzB,EAAyBA,iBAAkBnC,EAA3C,EAA2CA,QAASqC,EAApD,EAAoDA,qBAEpD,OACI,eAAC8J,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,CAASK,OAAK,EAACrC,SAAS,MAAMpB,MAAO,CAAEsK,QAAS,KAAhD,UAEKjW,EAASkF,aACN,cAAC+J,GAAA,EAAD,CAAOtD,MAAO,CAAEK,SAAU,WAAYkK,OAAQ,IAAMH,MAAO,GAAII,IAAK,IAChEtB,QAAM,EAAC7H,MAAM,MAAMhE,QAAQ,cACnC,cAACiD,EAAA,EAAD,CACIR,IAAG,iCAA4BzL,EAAS+B,SAArC,QACHyL,OAAK,EACL7B,MAAOiK,KAEX,cAAC7G,EAAA,EAAD,CAASpD,MAAOkK,GAAwBzG,OAAK,EAA7C,SACI,cAACjE,GAAA,EAAK6D,MAAN,UACI,cAAC7D,GAAA,EAAD,UACI,eAACA,GAAA,EAAKmC,QAAN,WACI,cAACR,EAAA,EAAD,CACIH,KAAK,OACL3D,QAAShJ,EAAS8B,MAClB6J,MAAO,CAAEqB,MAAO,WAEpB,4BAAI3G,kBAAOrG,EAASiC,KAAO,kBAC3B,2CACc,iCAAQ,eAAC,IAAD,CAAMqJ,GAAE,8BAAetL,EAASoE,YAAxB,aAAe,EAAezD,UAAtC,oBAAmDX,EAASoE,YAA5D,aAAmD,EAAe/B,YAAlE,wBAO1C,cAAC0M,EAAA,EAAD,CAASO,UAAQ,EAACvC,SAAS,SAA3B,SACK/M,EAASkE,OACN,qCACI,cAAC4H,EAAA,EAAD,CAAQkB,MAAOhN,EAASkF,YAAc,QAAU,MAC5CqK,QAAQ,OACRH,OAAK,EACLpG,QAAShJ,EAASkF,YAAc,uBAAyB,kBACzDuH,QAASxH,EACTrC,QAASA,IAGb,cAACkJ,EAAA,EAAD,CACIkE,SAAUhQ,EAASkF,YACnBkG,GAAImB,IACJjB,GAAE,kBAAatL,EAASF,IACxBkN,MAAM,SACNuC,QAAQ,QALZ,6BAUJvP,EAAS+D,QACT,cAAC+H,EAAA,EAAD,CAAQlJ,QAASA,EAAS6J,QAAS1H,EAAnC,+BAEA,cAAC+G,EAAA,EAAD,CACIlJ,QAASA,EACToN,SAAUhQ,EAASkF,YACnBuH,QAAS1H,EACTiI,MAAM,OAJV,mCCvELlC,gBAAS,YAAoD,IAApB9K,EAAmB,EAAnBA,SACpD,OACI,eAAC+O,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAAShC,SAAS,MAAlB,SACI,eAACsD,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa1D,MAAO,EAApB,SACI,cAACsB,GAAA,EAAD,CAAMvB,KAAK,QAAQK,MAAM,OAAOnB,KAAK,WAEzC,cAACwE,EAAA,EAAKC,OAAN,CAAa1D,MAAO,GAApB,SACI,4BAAI5M,EAASgC,qBAIzB,cAAC+M,EAAA,EAAD,CAAShC,UAAQ,EAAjB,SACI,eAACsD,EAAA,EAAD,CAAMyE,cAAc,SAApB,UACI,cAACzE,EAAA,EAAKC,OAAN,CAAa1D,MAAO,EAApB,SACI,cAACsB,GAAA,EAAD,CAAMrC,KAAK,WAAWc,KAAK,QAAQK,MAAM,WAE7C,cAACqD,EAAA,EAAKC,OAAN,CAAa1D,MAAO,GAApB,SACI,+BACKvG,kBAAOrG,EAASiC,KAAO,gCAKxC,cAAC8M,EAAA,EAAD,CAAShC,UAAQ,EAAjB,SACI,eAACsD,EAAA,EAAD,CAAMyE,cAAc,SAApB,UACI,cAACzE,EAAA,EAAKC,OAAN,CAAa1D,MAAO,EAApB,SACI,cAACsB,GAAA,EAAD,CAAMrC,KAAK,SAASc,KAAK,QAAQK,MAAM,WAE3C,cAACqD,EAAA,EAAKC,OAAN,CAAa1D,MAAO,GAApB,SACI,iCAAO5M,EAASmC,MAAhB,KAAyBnC,EAASkC,qBC9B3C4I,gBAAS,WAEpB,IAAQlD,EAAkBgD,IAAlBhD,cACkB5H,EAAkE4H,EAApFlF,iBAA4BiB,EAAwDiE,EAAxDjE,aAAcd,EAA0C+E,EAA1C/E,eAAgBsC,EAA0ByC,EAA1BzC,sBAC1DrF,EAAOgU,eAAPhU,GASR,OAPAsQ,qBAAU,WAGN,OAFItQ,GAAI6D,EAAa7D,GAEd,kBAAMqF,OACd,CAACrF,EAAI6D,EAAcwB,IAEtB3E,QAAQC,IAAIT,GACR6C,IAAmB7C,EAAiB,cAAC+S,GAAD,CAAkB/J,QAAQ,KAG9D,eAACqH,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa1D,MAAO,GAApB,UACI,cAAC,GAAD,CAAyB5M,SAAUA,IACnC,cAAC,GAAD,CAAuBA,SAAUA,IACjC,cAAC,GAAD,CAAuBsJ,WAAYtJ,EAASF,QAEhD,cAACuQ,EAAA,EAAKC,OAAN,CAAa1D,MAAO,EAApB,SACI,cAAC,GAAD,CAA0B5M,SAAUA,YC9BrC,SAASoW,KACpB,IAEA,EAA4BnG,mBAAS,MAArC,mBAAO3R,EAAP,KAAeqT,EAAf,KA0BA,OACI,qCACI,cAAC7E,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,yBACxB,cAAC+F,EAAA,EAAD,UACI,eAACjD,EAAA,EAAOkD,MAAR,CAAcqH,OAAO,IAArB,UACI,cAACvK,EAAA,EAAD,CAAQW,QA7BxB,WACIxP,IAAMkC,IAAImX,uBAA6BtM,OAAM,SAAAsI,GAAG,OAAI9R,QAAQC,IAAI6R,EAAIxU,cA4BvBkL,QAAQ,YAAYoG,OAAK,EAACmH,SAAO,IAClE,cAACzK,EAAA,EAAD,CAAQW,QA1BxB,WACIxP,IAAMkC,IAAImX,yBAA+BtM,OAAM,SAAAsI,GAAG,OAAI9R,QAAQC,IAAI6R,EAAIxU,cAyBvBkL,QAAQ,cAAcoG,OAAK,EAACmH,SAAO,IACtE,cAACzK,EAAA,EAAD,CAAQW,QAXxB,WACIxP,IAAMqC,KAAKgX,iBAAwB,IAAItM,OAAM,SAAAsI,GAAG,OAAIX,EAAUW,OAUVtJ,QAAQ,mBAAmBoG,OAAK,EAACmH,SAAO,IAChF,cAACzK,EAAA,EAAD,CAAQW,QAxBxB,WACIxP,IAAMkC,IAAImX,0BAAgCtM,OAAM,SAAAsI,GAAG,OAAI9R,QAAQC,IAAI6R,EAAIxU,cAuBvBkL,QAAQ,eAAeoG,OAAK,EAACmH,SAAO,IACxE,cAACzK,EAAA,EAAD,CAAQW,QArBxB,WACIxP,IAAMkC,IAAImX,0BAAgCtM,OAAM,SAAAsI,GAAG,OAAI9R,QAAQC,IAAI6R,EAAIxU,cAoBtBkL,QAAQ,eAAeoG,OAAK,EAACmH,SAAO,IACzE,cAACzK,EAAA,EAAD,CAAQW,QAlBxB,WACIxP,IAAMkC,IAAImX,2BAAiCtM,OAAM,SAAAsI,GAAG,OAAI9R,QAAQC,IAAI6R,EAAIxU,cAiB5BkL,QAAQ,WAAWoG,OAAK,EAACmH,SAAO,SAGvEjY,GACG,cAAC6T,GAAD,CAAkB7T,OAAQA,OC5C3B,SAASkY,KACpB,OACI,eAACzH,EAAA,EAAD,CAASiD,aAAW,EAApB,UACI,eAAClF,EAAA,EAAD,CAAQN,MAAI,EAAZ,UACI,cAAC0B,GAAA,EAAD,CAAMrC,KAAK,WADf,6DAIA,cAACkD,EAAA,EAAQ0H,OAAT,UACI,cAAC3K,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,cAAciL,SAAO,EAA1C,4CCPDzL,oBAAS,WAAuB,IAAD,IACnCnN,EAAeiN,IAAfjN,YAEP,OACI,eAACuN,EAAA,EAAD,WACI,cAAC4B,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,iBACxB,cAAC8D,EAAA,EAAD,CAAQ4C,KAAG,EAACtE,GAAG,KAAK4B,MAAM,MAAMhE,QAAO,UAAErL,EAAYO,aAAd,aAAE,EAAmBwY,WAE3D,UAAA/Y,EAAYO,aAAZ,eAAmB2B,UACpB,eAACkP,EAAA,EAAD,WACI,cAACjC,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,cAAcgE,MAAM,SAC5C,sBAAMrB,MAAO,CAACkB,UAAW,QAAzB,SAAmClP,EAAYO,MAAM2B,mB,UCXtDiL,gBAAS,WACpB,IAAO5C,EAAc0C,IAAd1C,WAEP,OACI,cAACyO,GAAA,EAAD,CAAO7N,KAAMZ,EAAWW,MAAMC,KAAM8N,QAAS1O,EAAWC,WAAYwE,KAAK,OAAzE,SACI,cAACgK,GAAA,EAAMrJ,QAAP,UACKpF,EAAWW,MAAMxJ,Y,UCGnB,SAASwX,GAAT,GAA0D,IAA7BC,EAA4B,EAA5BA,kBAEhC7N,EAAiB2B,IAAjB3B,aACR,OAAQ,cAAC,KAAD,CACJsI,cAAe,CAAElP,YAAa4G,EAAavC,QAASrE,YAAa0L,IAAK9E,EAAavC,QAASqH,IAAK7P,MAAO,MACxGwT,SAAU,SAAC7L,EAAD,GAA4B,IAAjB8L,EAAgB,EAAhBA,UACjB1I,EAAa9H,cAAc0E,GAAQzG,MAAK,kBAAM0X,GAAkB,MAAQ9M,OAAM,SAAA9L,GAAK,OAC/EyT,EAAU,CAAEzT,cAIpBsU,iBAAkBC,KAAW,CACzBpQ,YAAaoQ,OAAaC,aAT1B,SAaH,gBAAGd,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcvT,EAA/B,EAA+BA,OAAQqU,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,MAAhD,OACG,eAAC,KAAD,CAAMd,UAAU,gBAAgBJ,SAAUE,EAAcG,aAAa,MAArE,UAEI,cAACjB,GAAD,CAAajF,KAAK,cAAcmG,YAAY,iBAC5C,cAACiB,GAAD,CAAYpH,KAAK,MAAMmG,YAAY,MAAMoC,KAAM,IAC/C,cAAC,KAAD,CACIvI,KAAK,QAAQqG,OAAQ,kBACjB,cAACC,GAAD,CAAkB7T,OAAQA,EAAOJ,WAGzC,cAAC4N,EAAA,EAAD,CAAQkE,UAAW2C,IAAYC,GAASf,EACpCjP,QAASiP,EAAc9F,UAAQ,EAAC/C,QAAQ,SAASiJ,KAAK,SAASzE,OAAK,UCjCzE1C,oBAAS,WAAyB,IAAD,MAEpC7B,EAAiB2B,IAAjB3B,aACR,EAAkDgH,oBAAS,GAA3D,mBAAO8G,EAAP,KAA0BC,EAA1B,KACA,OACI,eAACC,GAAA,EAAIC,KAAL,WAEI,cAAC7G,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,OAAN,CAAa1D,MAAO,GAApB,UACI,cAACE,EAAA,EAAD,CAAQyC,QAAQ,OAAO/C,KAAK,OAAOxD,QAAO,0BAAWC,EAAavC,eAAxB,aAAW,EAAsBrE,eAE3E,cAACyJ,EAAA,EAAD,CAAQyD,QAAQ,QACZvG,QAAS+N,EAAoB,SAAW,iBACxCtK,QAAS,kBAAMuK,GAAsBD,WAIhDA,EAAoB,cAAC,GAAD,CAAmBD,kBAAmBE,IACvD,qCACI,cAAClK,EAAA,EAAD,CAAQ1B,GAAG,KAAX,mBAAiBnC,EAAavC,eAA9B,aAAiB,EAAsBrE,cACvC,sBAAMsJ,MAAO,CAAE8J,WAAY,YAA3B,mBAA0CxM,EAAavC,eAAvD,aAA0C,EAAsBqH,eCjBrEjD,gBAAS,YAAgD,IAApB9K,EAAmB,EAAnBA,SAGhD,OADAQ,QAAQC,IAAIT,GAER,eAAC6N,GAAA,EAAD,CAAMzC,GAAImB,IAAMjB,GAAE,sBAAiBtL,EAASsJ,YAA5C,UACI,cAAC2C,EAAA,EAAD,CAAOR,IAAG,iCAA4BzL,EAAS+B,SAArC,UACV,eAAC8L,GAAA,EAAKP,QAAN,CAAc4B,UAAU,SAAxB,UACI,cAACrB,GAAA,EAAKf,OAAN,UAAc9M,EAAS8B,QACvB,cAAC+L,GAAA,EAAKC,YAAN,UAAmBzH,kBAAO,IAAI9B,KAAKvE,EAASiC,MACxC,YACJ,cAAC4L,GAAA,EAAKC,YAAN,UAAmBzH,kBAAO,IAAI9B,KAAKvE,EAASiC,MACxC,qBCdL6I,gBAAS,WACpB,IAAQ7B,EAAiB2B,IAAjB3B,aAEA7C,EAAkC6C,EAAlC7C,WAAYY,EAAsBiC,EAAtBjC,kBAEpB,OACI,cAACiQ,GAAA,EAAIC,KAAL,CAAUtU,QAASoE,EAAnB,SACI,cAACqJ,EAAA,EAAD,UAEI,cAACA,EAAA,EAAKC,OAAN,CAAa1D,MAAO,GAApB,SACI,cAACiB,GAAA,EAAKmB,MAAN,UACK5I,EAAWoI,KAAI,SAAAxO,GAAQ,OACpB,cAAC,GAAD,CAAkBA,SAAUA,kBCblDmX,GAAQ,CACV,CACIC,SAAU,gBACVlF,OAAQ,kBAAM,cAAC,GAAD,MAElB,CACIkF,SAAU,cACVlF,OAAQ,kBAAM,cAAC,GAAD,MAElB,CACIkF,SAAU,UACVlF,OAAQ,kBAAM,cAAC,GAAD,OAIPpH,gBAAS,WACpB,IAAQ7B,EAAiB2B,IAAjB3B,aACR,OACI,cAACgO,GAAA,EAAIC,KAAL,UACI,cAACD,GAAA,EAAD,CACII,KAAM,CAAEhI,WAAW,EAAMhD,UAAU,GACnC8K,MAAOA,GACPG,YAAa,SAAC5J,EAAG/Q,GAAJ,OAAasM,EAAa7B,eAAezK,EAAK4a,qBCvB5DzM,gBAAS,WACpB,IAAQ7B,EAAiB2B,IAAjB3B,aAEAvC,EAAsDuC,EAAtDvC,QAASI,EAA6CmC,EAA7CnC,WAAYC,EAAiCkC,EAAjClC,kBAAmBE,EAAcgC,EAAdhC,UAEhD,OACI,cAACgQ,GAAA,EAAIC,KAAL,CAAUtU,QAASmE,EAAnB,SACI,eAACsJ,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa1D,MAAO,GAApB,SACI,cAACE,EAAA,EAAD,CAAQyC,QAAQ,OAAO/C,KAAK,OACxBxD,QAAuB,IAAd/B,EAAA,kCAAsCP,QAAtC,IAAsCA,OAAtC,EAAsCA,EAASrE,aAA/C,yBAA0EqE,QAA1E,IAA0EA,OAA1E,EAA0EA,EAASrE,YAAnF,qBAGjB,cAACgO,EAAA,EAAKC,OAAN,CAAa1D,MAAO,GAApB,SACI,cAACiB,GAAA,EAAKmB,MAAN,UACKlI,EAAW0H,KAAI,SAAA9H,GAAO,OACnB,cAAC,GAAD,CAAoCA,QAASA,GAA3BA,EAAQ/F,yB,iBCZvC,SAAS6W,GAAT,GAAkE,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,WACvD,OACI,cAAC,KAAD,CACIjM,IAAKgM,EACL9L,MAAO,CAAEqK,OAAQ,IAAKpJ,MAAO,QAC7B+K,mBAAoB,EACpBC,YAAa,EACbC,QAAQ,eACRC,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIT,EAAWS,M,cCflC,SAASC,GAAT,GAAmD,IAApBC,EAAmB,EAAnBA,SACpCC,EAAW,CACb7D,OAAQ,kBACRrG,YAAa,OACbmK,aAAc,MACdC,WAAY,OACZtJ,UAAW,SACXuJ,OAAQ,KAONC,EAASC,uBAAY,SAAAC,GACvBP,EAASO,EAAcpK,KAAI,SAAC3N,GAAD,OAAea,OAAOC,OAAOd,EACpD,CAAEgX,QAASgB,IAAIC,gBAAgBjY,WACpC,CAACwX,IACJ,EAAsDU,aAAY,CAAEL,WAA5DM,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,cAAeC,EAArC,EAAqCA,aAErC,OACI,gDAASF,KAAT,IAAyBrN,MAAOuN,EAAY,2BAAQZ,GAVvC,CACblK,YAAa,UAS+B,eAAuCkK,GAAnF,UACI,qCAAWW,MACX,cAAC/K,GAAA,EAAD,CAAMrC,KAAK,SAASc,KAAK,SACzB,cAACG,EAAA,EAAD,CAAQ9D,QAAQ,wBCrBb,SAASmQ,GAAT,GAA6D,IAAhCvW,EAA+B,EAA/BA,QAAShC,EAAsB,EAAtBA,YAEjD,EAA0BqP,mBAAc,IAAxC,mBAAOmJ,EAAP,KAAcf,EAAd,KACA,EAA8BpI,qBAA9B,mBAAOkI,EAAP,KAAgBT,EAAhB,KAcA,OALAtH,qBAAU,WACN,OAAO,WACHgJ,EAAMjW,SAAQ,SAACtC,GAAD,OAAegY,IAAIQ,gBAAgBxY,EAAKgX,eAE3D,CAACuB,IAEA,eAAC/I,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa1D,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQ4C,KAAG,EAAC1C,MAAM,OAAOhE,QAAQ,uBACjC,cAACoP,GAAD,CAAqBC,SAAUA,OAEnC,cAAChI,EAAA,EAAKC,OAAN,CAAa1D,MAAO,IACpB,eAACyD,EAAA,EAAKC,OAAN,CAAa1D,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQ4C,KAAG,EAAC1C,MAAM,OAAOhE,QAAQ,0BAChCoQ,GAASA,EAAM1E,OAAS,GACrB,cAAC8C,GAAD,CAAoBE,WAAYA,EAAYD,aAAc2B,EAAM,GAAGvB,aAG3E,cAACxH,EAAA,EAAKC,OAAN,CAAa1D,MAAO,IACpB,eAACyD,EAAA,EAAKC,OAAN,CAAa1D,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQ4C,KAAG,EAAC1C,MAAM,OAAOhE,QAAQ,8BAEhCoQ,GAASA,EAAM1E,OAAS,GAAK,qCAC1B,qBAAK5C,UAAU,cAAcnG,MAAO,CAAEkE,UAAW,IAAKyJ,SAAU,YAChE,eAACxN,EAAA,EAAOkD,MAAR,CAAcqH,OAAQ,EAAtB,UACI,cAACvK,EAAA,EAAD,CAAQlJ,QAASA,EAAS6J,QAhC9C,WACQ0L,GACAA,EAAQoB,mBAAmBC,QAAO,SAAAC,GAAI,OAAI7Y,EAAY6Y,OA8BC1N,UAAQ,EAACS,KAAK,UACzD,cAACV,EAAA,EAAD,CAAQkE,SAAUpN,EAAS6J,QAAS,kBAAM4L,EAAS,KAAK7L,KAAK,sBCrCtE1B,oBAAS,YAA4C,IAAD,EAAlBpE,EAAkB,EAAlBA,QAE7C,EAAkHkE,IAA1G3B,aAAgByQ,EAAxB,EAAwBA,cAAe9Y,EAAvC,EAAuCA,YAAagG,EAApD,EAAoDA,UAAWhE,EAA/D,EAA+DA,QAAS3B,EAAxE,EAAwEA,aAAcC,EAAtF,EAAsFA,YAAa2F,EAAnG,EAAmGA,SAEnG,EAAwCoJ,oBAAS,GAAjD,mBAAO0J,EAAP,KAAqBC,EAArB,KAEA,EAA4B3J,mBAAS,IAArC,mBAAO4J,EAAP,KAAeC,EAAf,KACA,EAA4C7J,mBAAS,IAArD,mBAAO8J,EAAP,KAAuBC,EAAvB,KAmBA,OACI,cAAC/C,GAAA,EAAIC,KAAL,UACI,eAAC7G,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa1D,MAAO,GAApB,UACI,cAACE,EAAA,EAAD,CAAQyC,QAAQ,OAAO/C,KAAK,QAAQxD,QAAQ,WAE3C0Q,GAEG,cAAC5N,EAAA,EAAD,CAAQyD,QAAQ,QACZvG,QAAS2Q,EAAe,SAAW,YACnClN,QAAS,kBAAMmN,GAAiBD,SAI5C,cAACtJ,EAAA,EAAKC,OAAN,CAAa1D,MAAO,GAApB,SACK+M,EACG,cAACR,GAAD,CAAmBvY,YAjCvC,SAA2BC,GACvBD,EAAYC,GAAMzB,MAAK,kBAAMwa,GAAgB,OAgCsBhX,QAASgE,IAE5D,cAACiH,GAAA,EAAKmB,MAAN,oBACKtI,EAAQa,cADb,aACK,EAAgBiH,KAAI,SAAAlH,GAAK,OACtB,eAACuG,GAAA,EAAD,WACI,cAAC5B,EAAA,EAAD,CAAOR,IAAKnE,EAAMpI,MACjBwa,GACG,eAAC5N,EAAA,EAAOkD,MAAR,CAAcxB,OAAK,EAAC6I,OAAQ,EAA5B,UAEI,cAACvK,EAAA,EAAD,CACIsD,OAAK,EACLpC,MAAM,QACNhE,QAAQ,OACR6C,KAAMvE,EAAMxH,GACZkQ,SAAU1I,EAAME,OAChB5E,QAASiX,IAAWvS,EAAMxH,IAAM8C,EAChC6J,QAAS,SAAAiB,GAAC,OA7CtD,SAA4BpG,EAAcoG,GACtCoM,EAAUpM,EAAEuM,cAAcpO,MAC1B5K,EAAaqG,GA2CyC4S,CAAmB5S,EAAOoG,MAG5C,cAAC5B,EAAA,EAAD,CAAQsD,OAAK,EAACpC,MAAM,MAAMR,KAAK,QAC3BwD,SAAU1I,EAAME,OAChB5E,QAASmX,IAAmBzS,EAAMxH,IAAM+G,EACxC4F,QAAS,kBA9CrD,SAA2BnF,GACnBA,EAAME,OACNpJ,IAAM+b,KAAK,gCAGfH,EAAkB1S,EAAMxH,IACxBoB,EAAYoG,EAAMxH,KAwCqCsa,CAAkB9S,WAlBtCA,EAAMxH,mBC5ClCgL,gBAAS,YAA6C,IAAnBpE,EAAkB,EAAlBA,QACtCuC,EAAiB2B,IAAjB3B,aACFkO,EAAQ,CACV,CAAEC,SAAU,QAASlF,OAAQ,kBAAM,cAACmI,GAAD,MACnC,CAAEjD,SAAU,SAAUlF,OAAQ,kBAAM,cAAC,GAAD,CAAexL,QAASA,MAC5D,CAAE0Q,SAAU,SAAUlF,OAAQ,kBAAM,cAACoI,GAAD,MACpC,CAAElD,SAAU,YAAalF,OAAQ,kBAAM,cAACqI,GAAD,MACvC,CAAEnD,SAAU,YAAalF,OAAQ,kBAAM,cAACqI,GAAD,OAG3C,OACI,cAACtD,GAAA,EAAD,CACII,KAAM,CAAE7J,OAAO,EAAMd,UAAU,GAC/B8N,aAAa,QACbrD,MAAOA,EACPG,YAAa,SAAC5J,EAAG/Q,GAAJ,OAAasM,EAAa9B,aAAaxK,EAAK4a,mB,oBCnBtDzM,gBAAS,YAA4C,IAAnBpE,EAAkB,EAAlBA,QAC7C,OACI,cAACqI,EAAA,EAAD,UACI,eAACsB,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa1D,MAAO,GAApB,SACI,cAACzB,GAAA,EAAK6D,MAAN,UACI,eAAC7D,GAAA,EAAD,WACI,cAACA,GAAA,EAAKc,MAAN,CAAYC,QAAM,EAACS,KAAK,QAAQlB,IAAK/E,EAAQpE,OAAR,qBACrC,cAAC6I,GAAA,EAAKmC,QAAN,CAAcwH,cAAc,SAA5B,SACI,cAAChI,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAStC,EAAQrE,uBAMjD,eAACgO,EAAA,EAAKC,OAAN,CAAa1D,MAAO,EAApB,UACI,eAAC6N,GAAA,EAAUzL,MAAX,CAAiBqH,OAAQ,EAAzB,UACI,cAACoE,GAAA,EAAD,CAAWnJ,MAAM,YAAYrO,MAAOyD,EAAQpB,iBAC5C,cAACmV,GAAA,EAAD,CAAWnJ,MAAM,YAAYrO,MAAOyD,EAAQmB,oBAEhD,cAAC6S,GAAA,EAAD,IAEA,cAAC,GAAD,CAAchU,QAASA,eCtB5BoE,gBAAS,WAEpB,IAAQnK,EAAamT,eAAbnT,SACAsI,EAAiB2B,IAAjB3B,aACAtC,EAAuDsC,EAAvDtC,eAAgBU,EAAuC4B,EAAvC5B,YAAaX,EAA0BuC,EAA1BvC,QAASS,EAAiB8B,EAAjB9B,aAW9C,OATAiJ,qBAAU,WAGN,OAFA/I,EAAY1G,GAEL,WACHwG,EAAa,MAGlB,CAACE,EAAaF,EAAcxG,IAE3BgG,EAAuB,cAACoM,GAAD,CAAkB/J,QAAQ,wBAIjD,cAACqH,EAAA,EAAD,UACI,cAACA,EAAA,EAAKC,OAAN,CAAa1D,MAAO,GAApB,SACKlG,GACG,qCACI,cAAC,GAAD,CAAeA,QAASA,IACxB,cAAC,GAAD,CAAgBA,QAASA,c,2BC1BlC,SAASiU,GAAT,GAAiE,IAA9BC,EAA6B,EAAxCC,UAAyBC,EAAe,mBACtDjI,EAAiBjI,IAA9B9G,UAAa+O,WACrB,OACI,cAAC,KAAD,2BACQiI,GADR,IAEI5I,OAAQ,SAACnB,GAAD,OAAW8B,EAAa,cAAC+H,EAAD,eAAe7J,IAAY,cAAC,KAAD,CAAUzF,GAAG,UCmDrER,oBA3Cf,WACE,IAAMiQ,EAAWC,eACjB,EAAmCpQ,IAA3BjN,EAAR,EAAQA,YAAamG,EAArB,EAAqBA,UAUrB,OARAsM,qBAAU,WACJzS,EAAYF,MACdqG,EAAU0E,UAAUyS,SAAQ,kBAAMtd,EAAYiL,kBAE9CjL,EAAYiL,iBAEb,CAACjL,EAAamG,IAEZnG,EAAY+K,UAGf,qCACE,cAAC,IAAD,CAAgBsD,SAAS,eAAekP,iBAAe,IACvD,cAAC,GAAD,IACA,cAAC,KAAD,CAAOC,KAAK,IAAI5P,OAAK,EAACsP,UAAWO,KACjC,cAAC,KAAD,CAAOD,KAAM,QACXjJ,OAAQ,kBACN,qCACE,cAAC,EAAD,IACA,cAAChH,EAAA,EAAD,CAAWS,MAAO,CAAEkB,UAAW,OAA/B,SACE,eAAC,KAAD,WACE,cAAC8N,GAAD,CAAcQ,KAAK,cAAc5P,OAAK,EAACsP,UAAWQ,KAClD,cAACV,GAAD,CAAcQ,KAAK,kBAAkBN,UAAWS,KAChD,cAACX,GAAD,CAAiCQ,KAAM,CAAC,kBAAmB,eAAgBN,UAAWU,IAAnER,EAASpc,KAC5B,cAAC,KAAD,CAAOwc,KAAK,UAAUN,UAAWzE,KACjC,cAAC,KAAD,CAAO+E,KAAK,gBAAgBN,UAAWW,KACvC,cAACb,GAAD,CAAcQ,KAAK,sBAAsBN,UAAWY,KACpD,cAAC,KAAD,CAAOZ,UAAWrE,mBAnBG,cAACzD,GAAD,CAAkB/J,QAAQ,mBClBhD0S,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxc,MAAK,YAAkD,IAA/Cyc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCNC,SAASO,KACtB,IAAQC,EAAanB,eAAbmB,SAMR,OAJA/L,qBAAU,WACR/H,OAAO+T,SAAS,EAAG,KAClB,CAACD,IAEG,KCGF,IAAM3d,GAAU6d,eAEvBC,IAASpK,OACP,cAACxH,EAAa6R,SAAd,CAAuBtZ,MAAOvF,EAA9B,SACE,eAAC,KAAD,CAAQc,QAASA,GAAjB,UACE,cAAC0d,GAAD,IACA,cAAC,GAAD,SAGJM,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.f5ef655d.chunk.js","sourcesContent":["export interface Pagination{\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T>{\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination){\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams{\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 2){\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { history } from \"../..\";\nimport {Activity, ActivityFormValues, ProfileActivity } from \"../models/activity\";\nimport { PaginatedResult } from \"../models/pagination\";\nimport { Photo, Profile, ProfileUpdateData } from \"../models/profile\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"../stores/store\";\n\nconst sleep = (delay: number) =>{\n    return new Promise((resolve) =>{\n        setTimeout(resolve, delay)\n    })\n}\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n\n    if(token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => {  \n        if(process.env.NODE_ENV === 'development') await sleep(1000);\n\n        const pagination = response.headers['pagination'];\n        if(pagination){\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination))\n            return response as AxiosResponse<PaginatedResult<any>>\n        }\n        return response;\n}, (error: AxiosError) => {\n    const {data, status, config} = error.response!;\n    switch(status){\n        case 400:\n            if(typeof data === 'string'){\n                toast.error(data);\n            }\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')){\n                history.push('/not-found')\n            }\n            if(data.errors){\n                const modelStateErrors = [];\n\n                for( const key in data.errors){\n                    if(data.errors[key]){\n                        modelStateErrors.push(data.errors[key]);\n                    }\n                }\n                throw modelStateErrors.flat();\n            }\n            \n            break;\n        case 401:\n            toast.error('unauthorized');\n            break;\n        case 404:\n            history.push('/not-found')\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {} ) => axios.post<T>(url, body).then(responseBody),\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody)\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => {\n        console.log(user)\n        return requests.post<User>('/account/register', user)\n    }\n    \n}\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('/photos', formData,{\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`,{}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (data: ProfileUpdateData) => requests.put<Profile>(`/profiles`,data),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    getActivities: (username: string, predicate: string) => requests.get<ProfileActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { Profile } from \"./profile\";\n\nexport  interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile\n    attendees: Profile[];\n}\n\nexport class Activity implements Activity{\n    constructor(init?: ActivityFormValues){\n        Object.assign(this, init);\n    }\n\n}\n\nexport class ActivityFormValues{\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string ='';\n    venue: string='';\n\n    constructor(activity?: Activity){\n        if(activity){\n            this.id = activity.id;\n            this.title = activity.title;\n            this.category = activity.category;\n            this.description = activity.description;\n            this.date = activity.date;\n            this.venue = activity.venue;\n            this.city = activity.city;\n        }\n    }\n}\n\nexport class ProfileActivity{\n    activityId: string = '';\n    title: string = '';\n    category: string='';\n    date: Date | null = null;\n}","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?:string;\n    bio?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[]\n}\n\nexport class Profile implements Profile{\n    constructor(user: User){\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\nexport interface Photo{\n    id: string;\n    url: string;\n    isMain: boolean\n\n}\nexport interface ProfileUpdateData{\n    displayName?: string;\n    bio?: string;\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\"\nimport agent from \"../api/agent\";\nimport  { Activity, ActivityFormValues } from \"../models/activity\";\nimport {format} from 'date-fns'\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\n\n\n\nexport default class ActivityStore{\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true)\n\n    constructor(){\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        );\n    }\n\n    get activitiesByDate(){\n        return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime())\n    }\n    get groupedActivities(){\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) =>{\n                const date = format(activity.date!, 'dd MMM yyyy')\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity]\n                return activities;\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n\n    get axiosParams(){\n        const params = new URLSearchParams();\n\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if(key === 'startDate'){\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if(key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch(predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true)\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n                break;\n        }\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    loadActivities = async () => {\n        try{\n            this.setLoadingInitial(true);\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity =>{\n            this.setActivity(activity);\n            })         \n              this.setLoadingInitial(false);\n              this.setPagination(result.pagination)\n        }catch(error){\n            console.log(error);\n            this.setLoadingInitial(false);\n            \n        }\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id)\n\n        if(activity){\n            this.selectedActivity = activity;\n            return activity;\n        } else {\n            this.setLoadingInitial(true);\n            try{\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity!)\n                runInAction(()=>{\n                    this.selectedActivity = activity\n                })\n                this.setLoadingInitial(false)\n                return activity;\n                \n            }catch( error){\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if(user){\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n                );\n                activity.isHost = activity.hostUsername === user.username;\n                activity.host = activity.attendees?.find(x => x.username === activity.hostUsername)\n        }\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) =>{\n        return this.activityRegistry.get(id);\n    }\n\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n   \n\n    createActivity = async (activity: ActivityFormValues) =>{\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try{\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity)\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() =>{\n                this.selectedActivity = newActivity;\n            })\n        } catch(error){\n            console.log(error);\n\n           \n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try{\n            await agent.Activities.update(activity);\n\n            runInAction(() => {\n                if(activity.id){\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n\n            })\n\n        }catch(error)\n        {\n            console.log(error);\n\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n\n        try{\n            await agent.Activities.delete(id);\n\n            runInAction(() => {\n               this.activityRegistry.delete(id);\n               this.loading = false\n            })\n\n        }catch(error){\n            console.log(error);\n\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try{\n            await agent.Activities.attend(this.selectedActivity!.id)\n\n            runInAction(() => {\n                if(this.selectedActivity?.isGoing){\n                    this.selectedActivity.attendees = \n                    this.selectedActivity.attendees?.filter(x => x.username !== user?.username)\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);   \n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            });\n        } catch(error) \n        {\n            console.log(error)\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try{\n            await agent.Activities.attend(this.selectedActivity!.id)\n\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch(error) {\n            console.log(error);\n        } finally\n        {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if(attendee.username === username){\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { ProfileActivity } from \"../models/activity\";\nimport { Photo, Profile, ProfileUpdateData } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore{\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    deleting = false;\n    followings: Profile[] = [];\n    loadingFollowings: boolean = false;\n    loadingActivities: boolean = false;\n    activeTab = 0;\n    activityTab = -1;\n    activities: ProfileActivity[] = [];\n\n    constructor(){\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n            if(activeTab === 3 || activeTab === 4)\n            {\n                const predicate = activeTab === 3 ? 'followers' : 'following';\n                this.loadFollowings(predicate);\n            } else {\n                this.followings = [];\n            }\n        })\n\n        reaction(\n            () => this.activityTab,\n            activityTab=> {\n            if(activityTab === 0)\n            {\n                this.loadActivities(this.profile!.username, \"future\");\n            }\n            else if(activityTab === 1 ){\n                this.loadActivities(this.profile!.username, \"past\");\n            }\n            else if(activityTab === 2 ){\n                this.loadActivities(this.profile!.username, \"hosting\");\n            }\n            else {\n                this.followings = [];\n            }\n        })\n    }\n\n    loadActivities = async (username: string, predicate: string) => {\n        try{\n            this.loadingActivities = true;\n            this.activities = await agent.Profiles.getActivities(username, predicate)\n\n            runInAction(() => {\n                this.loadingActivities = false;\n            });\n        } catch(error){\n            console.log(error)\n            runInAction(() => {\n                this.loadingActivities = false;\n            });\n        }\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n    setActivityTab = (activityTab: any) => {\n        this.activityTab = activityTab;\n    }\n\n    get isCurrentUser(){\n        if(store.userStore.user && this.profile)\n        {\n            return store.userStore.user.username === this.profile.username;\n        }\n\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            \n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n            this.loadActivities(this.profile!.username, \"future\");\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try{\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n\n            runInAction(() => {\n                if(this.profile){\n                    this.profile.photos?.push(photo);\n                    if(photo.isMain && store.userStore.user){\n                       store.userStore.setImage(photo.url);\n                       this.profile.image = photo.url;\n                    }\n                    this.uploading = false;\n                \n                }\n            });\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n\n        try{\n            await agent.Profiles.setMainPhoto(photo.id)\n\n            store.userStore.setImage(photo.url)\n\n            runInAction(() => {\n                if(this.profile && this.profile.photos)\n                {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            });\n        } catch (error){\n            console.log(error)\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    deletePhoto = async (id: string) => {\n        this.deleting = true;\n        try{\n            \n            await agent.Profiles.deletePhoto(id);\n\n            runInAction(() => {\n                this.profile!.photos = this.profile?.photos?.filter(photo => photo.id !== id);\n                this.deleting = false;\n            });\n        } catch( error ) {\n            console.log(error);\n            runInAction(() => this.deleting = false);\n        }\n    }\n\n    updateProfile = async (updateData: ProfileUpdateData) => {\n        this.loading = true;\n\n        try{\n            var profile = await agent.Profiles.updateProfile(updateData);\n            var user = await agent.Account.current();\n            runInAction(() => {\n                if(profile){\n                    this.profile = profile;\n                    store.userStore.user = user;\n                    this.loading = false;\n                    \n                }\n            });\n        } catch(error) {\n            \n            runInAction(() => this.loading=false );\n            throw error;\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try{\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if(this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username){\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n\n                if(this.profile && this.profile.username === store.userStore.user?.username){\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if(profile.username === username){\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following\n                    }\n                })\n                this.loading = false;\n            });\n        } catch(error){\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n\n            runInAction(() => {\n                this.followings = followings;\n                console.log(followings);\n                this.loadingFollowings = false;\n            })\n        try{\n\n        } catch(error){\n            console.log(error)\n            runInAction(() => this.loadingFollowings = false);\n        }\n\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore{\n    user: User | null = null;\n\n    constructor(){\n        makeAutoObservable(this);\n    }\n\n    get isLoggedIn(){\n        return !!this.user\n    }\n\n    login = async(creds: UserFormValues) => {\n        try{\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token)\n            runInAction(() => {\n                this.user = user;\n            })\n            history.push('/activities');\n            store.modalStore.closeModal();\n        }catch(error){\n            throw error;\n        }\n    }\n\n    logout = () =>{\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n        \n    }\n\n    getUser = async () => {\n        try{\n            const user = await agent.Account.current();\n\n            runInAction(() => this.user = user)\n        }catch (error){\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try{\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token)\n            runInAction(() => {\n                this.user = user;\n            })\n            history.push('/activities');\n            store.modalStore.closeModal();\n        }catch(error){\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n       if(this.user) this.user.image = image;\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store{\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore(){\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore{\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded =false;\n\n    constructor(){\n        makeAutoObservable(this);\n        reaction(() => this.token,\n        token =>{\n            if(token){\n                window.localStorage.setItem('jwt', token)\n            } else {\n                window.localStorage.removeItem('jwt')\n            }\n        })\n    }\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string|null) =>{\n        if(token) window.localStorage.setItem('jwt', token);\n        this.token = token;\n    }\n\n    setAppLoaded = () =>{\n        this.appLoaded = true;\n    }\n\n  \n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal{\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore{\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor(){\n        makeAutoObservable(this)\n    }\n\n    openModal = (content : JSX.Element) =>{\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/Comments\";\nimport { store } from \"./store\";\n\n\nexport default class CommentStore{\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor(){\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if(store.activityStore.selectedActivity)\n        {\n            this.hubConnection = new HubConnectionBuilder()\n            .withUrl(process.env.REACT_APP_CHAT_URL +'?activityId=' + activityId,{\n                accessTokenFactory: () => store.userStore.user?.token!\n            })\n            .withAutomaticReconnect()\n            .configureLogging(LogLevel.Information)\n            .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error))\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            })\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() =>\n                { \n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment)\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\n    }\n    \n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n    addComent = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n\n        try{\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch(error) {\n            console.log(error);\n        }\n    }\n}","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { Button, Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\nimport { useStore } from \"../stores/store\";\n\n\nexport default observer(function NavBar() {\n    const { userStore: { user, logout } } = useStore();\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: 10 }} />\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\n                <Menu.Item as={NavLink} to='/errors' name='Erorrs' />\n                <Menu.Item>\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\n                </Menu.Item>\n\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='MyProfile' icon='user' />\n                            <Dropdown.Item onClick={logout} icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n})","\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport Calendar from 'react-calendar'\nimport { Header, Menu } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\n\nexport default observer(function ActivityFilters() {\n\n    const { activityStore: { predicate, setPredicate } } = useStore();\n    return (\n        <>\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item\n                    content='All activities'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm going\"\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm hosting\"\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Header />\n            <Calendar\n                onChange={(date: Date) => setPredicate('startDate', date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    );\n});","import { observer } from \"mobx-react-lite\";\nimport React, { SyntheticEvent } from \"react\";\nimport { Button, Reveal } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({ profile }: Props) {\n    const { profileStore, userStore } = useStore();\n    const { updateFollowing, loading } = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    color='teal'\n                    content={profile.following ? 'Following' : 'Not following'}\n                />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    color={profile.following ? 'red' : 'green'}\n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    );\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Icon, Image } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport FollowButton from \"./FollowButton\";\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfileCard({ profile }: Props) {\n\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{profile.bio ? profile.bio.substr(0, 34) + '...' : 'Bio goes here'}</Card.Description>\n            </Card.Content>\n\n            <Card.Content extra>\n                <Icon name='user'>\n                    {profile.followersCount} followers\n                </Icon>\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    );\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { List, Image, Popup } from \"semantic-ui-react\";\nimport { Profile } from \"../../../app/models/profile\";\nimport ProfileCard from \"../../profiles/ProfileCard\";\n\ninterface Props {\n    attendees: Profile[];\n}\n\n\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\n\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image\n                                size='mini'\n                                circular\n                                src={attendee.image || '/assets/user.png'}\n                                bordered\n                                style={attendee.following ? styles : null}\n                            />\n                        </List.Item>\n                    }>\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n\n            ))}\n\n        </List>\n    );\n}\n);","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Icon, Item, Segment, Label } from \"semantic-ui-react\";\n\nimport { format } from 'date-fns'\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\nimport { Activity } from \"../../../app/models/activity\";\n\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({ activity }: Props) {\n\n\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />}\n                <Item.Group>\n                    <Item key={activity.id}>\n                        <Item.Image style={{ marginBottom: 3 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity?.host?.username}`}>{activity.host?.displayName}</Link></Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!} />\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View' />\n            </Segment>\n        </Segment.Group>\n    );\n}","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment } from \"react\";\nimport { Header } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityListItem from \"./ActivityListItem\";\n\n\nexport default observer( function ActivityList(){\n\n\n    const {activityStore} = useStore();\n    const {groupedActivities} = activityStore;\n\n    return(\n        <>\n        {groupedActivities.map(([group, activities]) => (\n            <Fragment key={group}>\n                <Header sub color='teal'>\n                    {group}\n                </Header>          \n                    {activities.map(activity =>(\n                        <ActivityListItem key={activity.id} activity={activity}/>\n                    ))}\n            </Fragment>\n            \n            \n        ))}\n       \n        \n        </>\n    ); \n}\n)","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { Button, Grid, Loader } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponents\";\nimport { PagingParams } from \"../../../app/models/pagination\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityFilters from \"./ActivityFilters\";\nimport ActivityList from \"./ActivityList\";\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\n\n\nexport default observer(function ActivityDashboard() {\n\n    const { activityStore } = useStore();\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities]);\n\n\n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder />\n                        <ActivityListItemPlaceholder />\n                    </>\n                ) :\n                    (\n                        <InfiniteScroll\n                            pageStart={0}\n                            loadMore={handleGetNext}\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                            initialLoad={false}\n                        >\n                            <ActivityList />\n                        </InfiniteScroll>\n                    )}\n\n\n\n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    );\n});","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props{\n    placeholder: string;\n    name: string;\n    label?: string;\n    type?: string\n}\n\nexport default function MyTextInput (props: Props){\n    const [field, meta] = useField(props.name);\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? \n            (<Label basic color='red'>{meta.error}</Label>): null}\n        </Form.Field>\n    )\n}","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Header, Label } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\n\nexport default observer(function LoginForm(){\n\n    const {userStore} = useStore();\n    return(\n        <Formik\n        initialValues={{email: '', password: '', error: null}}\n        onSubmit={(values, {setErrors}) => userStore.login(values).catch(error =>\n             setErrors({error: 'Invalid email or password'}))}\n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage \n                    name='error' render={() => \n                    <Label style={{marginBottom: 10}}\n                    basic color='red'\n                    content={errors.error} />}\n                    \n                    />\n                    <Button loading={isSubmitting} positive content='LogIn' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    );\n})","import React from \"react\";\nimport { Message, MessageList } from \"semantic-ui-react\";\n\ninterface Props{\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}:Props)\n{\n    return(\n        <Message error>\n            {errors && (\n                <MessageList>\n                    {errors.map((err: any, i: any) =>{\n                        return <Message.Item key={i}>{err}</Message.Item>\n                    })}\n                </MessageList>\n            )}\n        </Message>\n    );\n\n}","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Header } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from 'yup'\nimport ValidationErrors from \"../errors/ValidationErrors\";\n\nexport default observer(function RegisterForm(){\n\n    const {userStore} = useStore();\n    return(\n        <Formik\n        initialValues={{displayName: '', username: '',email: '', password: '', error: null}}\n        onSubmit={(values, {setErrors}) => userStore.register(values).catch(error =>\n             setErrors({error}))}\n             validationSchema={Yup.object({\n                 displayName: Yup.string().required(),\n                 username: Yup.string().required(),\n                 email: Yup.string().required().email(),\n                 password: Yup.string().required(),\n             })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign upReactivities' color='teal' textAlign='center' />                   \n                    <MyTextInput name='displayName' placeholder='Display Name'  />\n                    <MyTextInput name='username' placeholder='Username'  />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage \n                    name='error' render={() => \n                    <ValidationErrors errors={errors.error}/>}\n                    \n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting}\n                     loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    );\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Header, Segment, Image, Button } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport LoginForm from \"../users/LoginForm\";\nimport RegisterForm from \"../users/RegisterForm\";\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead '>\n            <Header as=\"h1\" inverted>\n                <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\n                Reactivities\n            </Header>\n            {userStore.isLoggedIn ? (\n                <>\n                    <Header as=\"h2\" inverted cpntent='Welcome to Reactivities' />\n                    <Button as={Link} to='/activities' size='huge' inverted>\n                        Go to Activities\n                    </Button>\n                </>\n            ) :\n                (\n                    <>\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                            LogIn!\n                        </Button>\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                            Register!\n                        </Button>\n                    </>\n                )}\n\n        </Segment>\n    );\n})","import React from \"react\";\nimport { Dimmer, Loader } from \"semantic-ui-react\";\n\ninterface Props{\n    inverted?: boolean;\n    content: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props){\n    return(\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content}/>\n        </Dimmer>\n    );\n}","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props{\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props){\n    const [field, meta] = useField(props.name);\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? \n            (<Label basic color='red'>{meta.error}</Label>): null}\n        </Form.Field>\n    )\n}","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label, Select } from \"semantic-ui-react\";\n\ninterface Props{\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props){\n    const [field, meta, helpers] = useField(props.name);\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n            clearable\n            options={props.options}\n            value={field.value || null}\n            onChange={(e, d) => helpers.setValue(d.value)}\n            onBlur={() => helpers.setTouched(true)}\n            placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? \n            (<Label basic color='red'>{meta.error}</Label>): null}\n        </Form.Field>\n    )\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n]","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker'\n\n\n\nexport default function MyTextArea(props: Partial<ReactDatePickerProps>){\n    const [field, meta, helpers] = useField(props.name!);\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker \n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? \n            (<Label basic color='red'>{meta.error}</Label>): null}\n        </Form.Field>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponents\";\nimport { useStore } from \"../../../app/stores/store\";\nimport { v4 as uuid } from 'uuid'\nimport { Formik, Form } from \"formik\";\nimport * as Yup from 'yup'\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\nimport { ActivityFormValues } from \"../../../app/models/activity\";\n\n\nexport default observer(function ActivityForm() {\n\n    const { activityStore } = useStore();\n    const history = useHistory();\n\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\n    const { id } = useParams<{ id: string }>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationScheme = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required('The activity category is required'),\n        date: Yup.string().required(\"Date is required\").nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required()\n    });\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\n    }, [id, loadActivity])\n\n\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            }\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n        } else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik\n                validationSchema={validationScheme}\n                enableReinitialize\n                initialValues={activity}\n                onSubmit={values => handleFormSubmit(values)}\n            >\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='title' placeholder='title' />\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                        <MyDateInput\n                            placeholderText='Date'\n                            name='date'\n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                        />\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder='City' name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button\n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting}\n                            floated='right'\n                            positive type='submit'\n                            content='Submit' />\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n\n                )}\n            </Formik>\n\n        </Segment>\n    );\n})","import React from \"react\";\nimport { Segment, List, Label, Item, Image } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { observer } from \"mobx-react-lite\";\nimport { Activity } from \"../../../app/models/activity\";\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar({\n    activity: { attendees, host },\n}: Props) {\n\n    if (!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign=\"center\"\n                style={{ border: \"none\" }}\n                attached=\"top\"\n                secondary\n                inverted\n                color=\"teal\"\n            >\n                {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\"} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map((attendee) => (\n                        <Item style={{ position: \"relative\" }} key={attendee.username}>\n                            {attendee.username === host?.username &&\n                                <Label\n                                    style={{ position: \"absolute\" }}\n                                    color=\"orange\"\n                                    ribbon=\"right\"\n                                >\n                                    Host\n                                </Label>\n                            }\n                            <Image size=\"tiny\" src={attendee.image || \"/assets/user.png\"} />\n                            <Item.Content verticalAlign=\"middle\">\n                                <Item.Header as=\"h3\">\n                                    <Link to={`profiles/${attendee.username}`}>\n                                        {attendee.displayName}\n                                    </Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                    <Item.Extra style={{ color: \"orange\" }}>Following</Item.Extra>\n                                }\n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n    );\n});\n","import { Field, FieldProps, Form, Formik } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store'\nimport * as Yup from 'yup'\nimport { formatDistanceToNow } from 'date-fns'\n\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId)\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId])\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) =>\n                        commentStore.addComent(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'enter' && e.shiftKey)\n                                                    return;\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n\n                </Formik>\n\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt) + ' ago'}</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\n                                <Comment.Actions>\n                                    <Comment.Action>Reply</Comment.Action>\n                                </Comment.Actions>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n\n\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Header, Item, Segment, Image, Label } from \"semantic-ui-react\";\nimport { Activity } from \"../../../app/models/activity\";\nimport { format } from \"date-fns\";\nimport { useStore } from \"../../../app/stores/store\";\n\nconst activityImageStyle = {\n    filter: \"brightness(30%)\",\n};\n\nconst activityImageTextStyle = {\n    position: \"absolute\",\n    bottom: \"5%\",\n    left: \"5%\",\n    width: \"100%\",\n    height: \"auto\",\n    color: \"white\",\n};\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\n\n    return (\n        <Segment.Group>\n            <Segment basic attached=\"top\" style={{ padding: \"0\" }}>\n\n                {activity.isCancelled &&\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\n                        ribbon color='red' content='Cancelled' />}\n                <Image\n                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                    fluid\n                    style={activityImageStyle}\n                />\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size=\"huge\"\n                                    content={activity.title}\n                                    style={{ color: \"white\" }}\n                                />\n                                <p>{format(activity.date!, \"dd MMM yyyy \")}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName} </Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached=\"bottom\">\n                {activity.isHost ? (\n                    <>\n                        <Button color={activity.isCancelled ? 'green' : 'red'}\n                            floated='left'\n                            basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n\n                        <Button\n                            disabled={activity.isCancelled}\n                            as={Link}\n                            to={`/manage/${activity.id}`}\n                            color=\"orange\"\n                            floated=\"right\"\n                        >\n                            Manage Event\n                        </Button>\n                    </>\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\n                ) : (\n                    <Button\n                        loading={loading}\n                        disabled={activity.isCancelled}\n                        onClick={updateAttendance}\n                        color=\"teal\">\n                        Join Activity\n                    </Button>\n                )}\n            </Segment>\n        </Segment.Group>\n    );\n});\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\nimport { Activity } from '../../../app/models/activity';\nimport { format } from 'date-fns'\n\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <span>\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                        </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponents\";\nimport { useStore } from \"../../../app/stores/store\";\nimport AcctivityDetailedSidebar from \"./ActivityDetaildeSidebat\";\nimport AcctivityDetailedChat from \"./ActivityDetailedChat\";\nimport AcctivityDetailedHeader from \"./ActivityDetailedHeader\";\nimport AcctivityDetailedInfo from \"./ActivityDetailedInfo\";\n\n\nexport default observer(function ActivityDetails() {\n\n    const { activityStore } = useStore();\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\n    const { id } = useParams<{ id: string }>();\n\n    useEffect(() => {\n        if (id) loadActivity(id)\n\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity])\n\n    console.log(activity)\n    if (loadingInitial || !activity) return <LoadingComponent content='' />;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <AcctivityDetailedHeader activity={activity} />\n                <AcctivityDetailedInfo activity={activity} />\n                <AcctivityDetailedChat activityId={activity.id} />\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <AcctivityDetailedSidebar activity={activity} />\n            </Grid.Column>\n        </Grid>\n    );\n})","import React, { useState } from 'react';\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n                <ValidationErrors errors={errors} />}\n        </>\n    )\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return(\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search'/>\n                Oops - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n}","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Container, Header, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\n\nexport default observer(function ServerError(){\n    const {commonStore} = useStore();\n\n    return(\n        <Container>\n            <Header as='h1' content='Server error'/>\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\n\n            {commonStore.error?.details && \n            <Segment>\n                <Header as='h4' content='Stack trace' color='teal'/>\n                <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n\n            </Segment>}\n        </Container>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Modal } from \"semantic-ui-react\";\nimport { useStore } from \"../../stores/store\";\n\nexport default observer(function ModalContainer(){\n    const {modalStore} = useStore();\n\n    return(\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    );\n})","import React from \"react\"\nimport { ErrorMessage, Form, Formik } from \"formik\";\n\nimport * as Yup from 'yup'\nimport ValidationErrors from \"../errors/ValidationErrors\";\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport { Button } from \"semantic-ui-react\";\n\ninterface Props {\n    updateProdileMode: (value: boolean) => void\n}\n\nexport default function ProfileUpdateForm({ updateProdileMode }: Props) {\n\n    const { profileStore } = useStore();\n    return (<Formik\n        initialValues={{ displayName: profileStore.profile!.displayName, bio: profileStore.profile!.bio, error: null }}\n        onSubmit={(values, { setErrors }) => {\n            profileStore.updateProfile(values).then(() => updateProdileMode(false)).catch(error =>\n                setErrors({ error }))\n        }\n\n        }\n        validationSchema={Yup.object({\n            displayName: Yup.string().required(),\n\n        })}\n    >\n        {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\n            <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n\n                <MyTextInput name='displayName' placeholder='Display Name' />\n                <MyTextArea name='bio' placeholder='Bio' rows={5} />\n                <ErrorMessage\n                    name='error' render={() =>\n                        <ValidationErrors errors={errors.error} />}\n\n                />\n                <Button disabled={!isValid || !dirty || isSubmitting}\n                    loading={isSubmitting} positive content='Update' type='submit' fluid />\n            </Form>\n        )}\n    </Formik>)\n}","\nimport { observer } from \"mobx-react-lite\";\nimport React, { useState } from \"react\";\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\n\nimport ProfileUpdateFrom from \"./ProfileUpdateFrom\";\n\nexport default observer(function RegisterForm() {\n\n    const { profileStore } = useStore();\n    const [updateProfileMode, setUpdateProfileMode] = useState(false);\n    return (\n        <Tab.Pane>\n\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='user' content={`About ${profileStore.profile?.displayName}`} />\n\n                    <Button floated='right'\n                        content={updateProfileMode ? 'Cancel' : 'Update Profile'}\n                        onClick={() => setUpdateProfileMode(!updateProfileMode)}\n                    />\n                </Grid.Column>\n            </Grid>\n            {updateProfileMode ? <ProfileUpdateFrom updateProdileMode={setUpdateProfileMode} /> :\n                <>\n                    <Header as='h3'>{profileStore.profile?.displayName}</Header>\n                    <span style={{ whiteSpace: 'pre-wrap' }}>{profileStore.profile?.bio}</span>\n                </>\n            }\n\n        </Tab.Pane>\n    );\n})","import { format } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Icon, Image } from \"semantic-ui-react\";\nimport { ProfileActivity } from \"../../app/models/activity\";\n\ninterface Props {\n    activity: ProfileActivity\n}\n\nexport default observer(function ProfileEventCard({ activity }: Props) {\n\n    console.log(activity)\n    return (\n        <Card as={Link} to={`/activities/${activity.activityId}`}>\n            <Image src={`/assets/categoryImages/${activity.category}.jpg`} />\n            <Card.Content textAlign='center'>\n                <Card.Header>{activity.title}</Card.Header>\n                <Card.Description>{format(new Date(activity.date!),\n                    'do LLL')}</Card.Description>\n                <Card.Description>{format(new Date(activity.date!),\n                    'h:mm a')}</Card.Description>\n            </Card.Content>\n\n\n        </Card>\n    );\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileCard from \"./ProfileCard\";\nimport ProfileEventCard from \"./ProfileEventCard\";\n\n\nexport default observer(function ProfileActivities() {\n    const { profileStore } = useStore();\n\n    const { activities, loadingActivities } = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n\n                <Grid.Column width={16}>\n                    <Card.Group>\n                        {activities.map(activity => (\n                            <ProfileEventCard activity={activity} />\n                        ))}\n                    </Card.Group>\n\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Tab } from 'semantic-ui-react'\nimport { useStore } from '../../app/stores/store'\nimport ProfileActivities from './ProfileActivities'\nimport ProfileEventCard from './ProfileEventCard'\n\nconst panes = [\n    {\n        menuItem: 'Future events',\n        render: () => <ProfileActivities />,\n    },\n    {\n        menuItem: 'Past events',\n        render: () => <ProfileActivities />,\n    },\n    {\n        menuItem: 'Hosting',\n        render: () => <ProfileActivities />,\n    },\n]\n\nexport default observer(function ActivityTabs() {\n    const { profileStore } = useStore();\n    return (\n        <Tab.Pane>\n            <Tab\n                menu={{ secondary: true, pointing: true }}\n                panes={panes}\n                onTabChange={(e, data) => profileStore.setActivityTab(data.activeIndex)}\n\n            />\n        </Tab.Pane>\n    )\n});","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileCard from \"./ProfileCard\";\n\nexport default observer(function ProfileFolloeings() {\n    const { profileStore } = useStore();\n\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='user'\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People  ${profile?.displayName} is following`} />\n                </Grid.Column>\n\n                <Grid.Column width={16}>\n                    <Card.Group>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n})","\nimport React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\n    return (\n        <Cropper\n            src={imagePreview}\n            style={{ height: 200, width: '100%' }}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\ninterface Props {\n    setFiles: (files: any) => void\n}\n\nexport default function PhotoWidgetDropZone({ setFiles }: Props) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        hieght: 200\n    }\n\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file,\n            { preview: URL.createObjectURL(file) })))\n    }, [setFiles])\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : { ...dzStyles }}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}","import React, { useEffect, useState } from \"react\";\nimport { Button, Grid, Header } from \"semantic-ui-react\";\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\nimport PhotoWidgetDropZone from \"./PhotoWidgetDropzone\";\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({ loading, uploadPhoto }: Props) {\n\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\n        }\n    }, [files])\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropZone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n\n                {files && files.length > 0 && <>\n                    <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\n                    <Button.Group widths={2}>\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n\n                    </Button.Group>\n                </>\n                }\n\n            </Grid.Column>\n        </Grid>\n    );\n}","import { observer } from \"mobx-react-lite\";\nimport React, { SyntheticEvent, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\nimport { Photo, Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    profile: Profile\n}\nexport default observer(function ProfilePhotos({ profile }: Props) {\n\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto, deleting } } = useStore();\n\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n\n    const [target, setTarget] = useState('');\n    const [deletingTarget, setDeletingTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo) {\n        if (photo.isMain) {\n            toast.info(\"You can't delete main photo\")\n            return;\n        }\n        setDeletingTarget(photo.id);\n        deletePhoto(photo.id);\n    }\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n\n                    {isCurrentUser && (\n\n                        <Button floated='right'\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ) : (\n                        <Card.Group>\n                            {profile.photos?.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url} />\n                                    {isCurrentUser && (\n                                        <Button.Group fluid widths={2}>\n\n                                            <Button\n                                                basic\n                                                color='green'\n                                                content='Main'\n                                                name={photo.id}\n                                                disabled={photo.isMain}\n                                                loading={target === photo.id && loading}\n                                                onClick={e => handleSetMainPhoto(photo, e)}\n                                            />\n\n                                            <Button basic color='red' icon='trash'\n                                                disabled={photo.isMain}\n                                                loading={deletingTarget === photo.id && deleting}\n                                                onClick={() => handleDeletePhoto(photo)}\n                                            />\n                                        </Button.Group>\n                                    )}\n                                </Card>\n                            ))}\n\n\n                        </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n\n        </Tab.Pane>\n    );\n\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Tab } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileAbout from \"./ProfileAbout\";\nimport ProfileEvents from \"./ProfileEvents\";\nimport ProfileFollowings from \"./ProfileFollowings\";\nimport ProfilePhotos from \"./ProfilePhotos\";\n\ninterface Props {\n    profile: Profile;\n}\nexport default observer(function ProfileContent({ profile }: Props) {\n    const { profileStore } = useStore();\n    const panes = [\n        { menuItem: 'About', render: () => <ProfileAbout /> },\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\n        { menuItem: 'Events', render: () => <ProfileEvents /> },\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\n        { menuItem: 'Following', render: () => <ProfileFollowings /> }\n    ];\n\n    return (\n        <Tab\n            menu={{ fluid: true, vertical: true }}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n\n    );\n}\n)","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport FollowButton from \"./FollowButton\";\n\ninterface Props {\n    profile: Profile;\n}\nexport default observer(function ProfileHeader({ profile }: Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || `/assets/user.png`} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n\n                    <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n});","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../app/layout/LoadingComponents';\nimport { useStore } from '../../app/stores/store';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\nexport default observer(function ProfilePage() {\n\n    const { username } = useParams<{ username: string }>();\n    const { profileStore } = useStore();\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\n\n    useEffect(() => {\n        loadProfile(username)\n\n        return () => {\n            setActiveTab(0);\n        }\n\n    }, [loadProfile, setActiveTab, username])\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile ...' />\n\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile} />\n                    </>}\n            </Grid.Column>\n        </Grid>\n    );\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\n    const { userStore: { isLoggedIn } } = useStore();\n    return (\n        <Route\n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}","import React, { Fragment, useEffect } from 'react';\nimport './styles.css';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponents';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRout';\n\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded())\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore]);\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route path='/' exact component={HomePage} />\n      <Route path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute path='/activities' exact component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <Route path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )} />\n\n\n\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport App from './app/layout/App';\nimport { StoreContext, store } from './app/stores/store';\nimport reportWebVitals from './reportWebVitals';\nimport { Router } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}